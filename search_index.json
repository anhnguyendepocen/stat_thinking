[
["index.html", "Statistical Reasoning through Computation and R Preface", " Statistical Reasoning through Computation and R Brandon LeBeau and Andrew S. Zieffler July 28, 2020 Preface This book provides a modern statistical reasoning and introduction to statistics text. Computation, using the R programming language, are used instead of relying on traditional statistical theory. These analyses can often be categorized into two broad categories, Descriptive Statistics Inferential Statistics Descriptive Statistics help to describe the data and are particularly useful to give a single numeric summary for a single variable. We will explore this idea more fully in this section. Inferential Statistics help us to make broader statements from the data we have to the larger group of interest, commonly referred to as the population. More details on these steps later in the course. "],
["introduction.html", "Chapter 1 Introduction 1.1 Statistics vs Data Science 1.2 Experiments vs Observations 1.3 Data Structure", " Chapter 1 Introduction Here is an intro. And more. 1.1 Statistics vs Data Science 1.2 Experiments vs Observations 1.3 Data Structure "],
["visualization.html", "Chapter 2 Visualization 2.1 Exploring Attributes 2.2 Plot Customization 2.3 Density plots", " Chapter 2 Visualization Data scientists and statisticians visualize data to explore and understand data. Visualization can help analysts identify features in the data such as typical or extreme observations and also for describe variation. Because it is so powerful, data visualiztion is often the first step in any statistical analysis. 2.0.1 College Scorecard Data The U.S. Department of Education publishes data on institutions of higher education in their College Scorecard (https://collegescorecard.ed.gov/) to facilitate transparency and provide information for interested stakeholders (e.g., parents, students, educators). A subset of this data is provided in the file College-scorecard-clean.csv. To illustrate some of the common methods statisticians use to visualize data, we will examine admissions rates for 2,019 institutions of higher education. Before we begin the analysis, we will load two packages, the tidyverse package and the ggformula package. These packages include many useful functions that we will use in this chapter. library(tidyverse) library(ggformula) There are many functions in R to import data. We will use the function read_csv() since the data file we are importing (College-scorecard-clean.csv) is a comma separated value (CSV) file..1 CSV files are a common format for storing data. Since they are encoded as text files they geerally do not take up a lot of space nor computer memory. They get their name from the fact that in the text file, each variable (i.e. column in the data) is separated by a comma within each row. The syntax to import the college scorecard data is as follows: colleges &lt;- read_csv( file = &quot;https://raw.githubusercontent.com/lebebr01/statthink/master/data-raw/College-scorecard-clean.csv&quot;, guess_max = 10000 ) In this syntax we have passed two arguments to the read_csv() function. The first argument, file=, indicates the path to the data file. The data file here is stored on GitHub, so the path is specified as a URL. The second argument, guess_max=, helps ensure that the data are read in appropriately. This argument will be described in more detail later. The syntax to the left of the read_csv() function, namely colleges &lt;-, takes the output of the function and stores it, or in the language of R, assigns it to an object named colleges. In data analysis, it is often useful to use results in later computations, so rather than continually re-running syntax to obtain these results, we can instead store those results in an object and then compute on the object. Here for example, we would like to use the data that was read by the read_csv() function to explore it. When we want to assign computational results to an object, we use the assignment operator, &lt;- . (Note that the assignment operator looks like a left-pointing arrow; it is taking the computational result produced on the right side and storing it in the object to the left side.) 2.0.2 View the Data Once we have imported and assigned the data to an object, it is quite useful to ensure that it was read in appropriately. The head() function will give us a quick snapshot of the data by printing the first six rows of data. head(colleges) ## # A tibble: 6 x 17 ## instnm city stabbr preddeg region locale adm_rate actcmmid ugds costt4_a ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alaba… Norm… AL Bachel… South… City:… 0.903 18 4824 22886 ## 2 Unive… Birm… AL Bachel… South… City:… 0.918 25 12866 24129 ## 3 Unive… Hunt… AL Bachel… South… City:… 0.812 28 6917 22108 ## 4 Alaba… Mont… AL Bachel… South… City:… 0.979 18 4189 19413 ## 5 The U… Tusc… AL Bachel… South… City:… 0.533 28 32387 28836 ## 6 Aubur… Mont… AL Bachel… South… City:… 0.825 22 4211 19892 ## # … with 7 more variables: costt4_p &lt;dbl&gt;, tuitionfee_in &lt;dbl&gt;, ## # tuitionfee_out &lt;dbl&gt;, debt_mdn &lt;dbl&gt;, grad_debt_mdn &lt;dbl&gt;, female &lt;dbl&gt;, ## # bachelor_degree &lt;dbl&gt; 2.1 Exploring Attributes Data scientists and statisticians often start analyses by exploring attributes (i.e., variables) that are of interest to them. For example, suppose we are interested in exploring the admission rates of the institutions in the college scorecard data to determine how selective the different institutions are. We will begin our exploration of admission rates by examining different visualizations of the admissions rate attribute. There is not one perfect visulaiztion for exploring the data. Each visualization has pros and cons; it may highlight some features of the attribute and mask others. It is often necessary to look at many different visualizations of the data in the exploratory phase. 2.1.1 Histograms The first viualization we will examine is a histogram. We can create a histogram of the admission rates using the gf_histrogram() function. (This function is part of the ggformula package which needs to be loaded prior to using the gf_histogram() function.) This function requires two arguments. The first argument is a formula that identifies the variables to be plotted and the second argument, data=, specifies the data object we assigned earlier. The syntax used to create a histrogram of the admission rates is: gf_histogram(~ adm_rate, data = colleges) The formula we provide in the first argument is based on the following general structure: ~ attribute name where the attribute name identified to the right of the ~ is the exact name of one of the columns in the colleges data object. 2.1.2 Interpretting Histograms Histograms are created by collapsing the data into bins and then counting the number of observations that fall into each bin. To show this more clearly in the figure created previously, we can color the bin lines to highlight the different bins. To do this we include an additional argument, color=, in the gf_histogram() function. We can also set the color for the bins themselves using the fill= argument. Here we color the bin lines black and set the bin color to yellow.2 gf_histogram(~ adm_rate, data = colleges, color = &#39;black&#39;, fill = &#39;yellow&#39;) Rather than focusing on any one bin, we typically want to describe the distribution as a whole. For example, it appears as though most institutions admit a high proportion of applicants since the bins to the right of 0.5 have higher counts than the bins that are below 0.5. There are, however, some institutions that are quite selective, only admitting fewer than 25% of the students who apply. 2.1.2.1 Adjusting Number of Bins Interpretation of the distribution is sometimes influenced by the width or number of bins. It is often useful to change the number of bins to explore the impact this may have on your interpretation. This can be accomplished by either (1) changing the width of the bins via thebinwidth= argument in the gf_histogram() function, or (2) changing the number of bins using the bins= argument. Below we show both methods: gf_histogram(~ adm_rate, data = colleges, color = &#39;black&#39;, fill = &#39;yellow&#39;, bins = 10) gf_histogram(~ adm_rate, data = colleges, color = &#39;black&#39;, fill = &#39;yellow&#39;, binwidth = .01) In general, our interpretation remains the same, namely that most institutions admit a high proportion of applicants. When we used a bin width of 0.01, however, we were able to see that several institutions admit 100% of applicants. This was obscured in the other histograms we examined. As a data scientist these institutions might warrant a more nuanced examination. 2.2 Plot Customization There are many ways to further customize the plot we produced to make it more appealing. For example, you might want to change the label on the x-axis from adm_rate to something more informative. Or, you may want to add a descriptive title to your plot. These customizations can be specified using the gf_labs() function. 2.2.1 Axes labels To change the labels on the x- and y-axes, we can use the arguments x= and y= in the gf_labs() function. These arguments take the text for the label you want to add to each axis, respectively. Here we change the text on the x-axis to &quot;Admission Rate&quot; and the text on the y-axis to &quot;Frequency&quot;. The gf_labs() function is connected to the histogram by linking the gf_histogram() and gf_labs() functions with the pipe operator (%&gt;%). gf_histogram(~ adm_rate, data = colleges, color = &#39;black&#39;, fill = &#39;yellow&#39;, bins = 25) %&gt;% gf_labs( x = &#39;Admission Rate&#39;, y = &#39;Frequency&#39; ) 2.2.2 Plot title and subtitle We can also add a title and subtitle to our plot. Similar to changing the axis labels, these are added using gf_labs(), but using the title= and subtitle= arguments. gf_histogram(~ adm_rate, data = colleges, color = &#39;black&#39;, fill = &#39;yellow&#39;, bins = 25) %&gt;% gf_labs( x = &#39;Admission Rate&#39;, y = &#39;Frequency&#39;, title = &#39;Distribution of admission rates for 2,019 institutions of higher education.&#39;, subtitle = &#39;Data Source: U.S. Department of Education College Scorecard&#39; ) 2.2.3 Plot theme By default, the plot has a grey background and white grid lines. This can be modified to using the gf_theme() function. For example, in the syntax below we change the plot theme to a white background with no grid lines using theme_classic(). Again, the gf_theme() is linked to the histogram with the pipe operator. gf_histogram(~ adm_rate, data = colleges, color = &#39;black&#39;, fill = &#39;yellow&#39;, bins = 25) %&gt;% gf_labs( x = &#39;Admission Rate&#39;, y = &#39;Frequency&#39;, title = &#39;Distribution of admission rates for 2,019 institutions of higher education.&#39;, subtitle = &#39;Data Source: U.S. Department of Education College Scorecard&#39; ) %&gt;% gf_theme(theme_classic()) We have created a custom theme to use in the gf_theme() function that we will use for most of the plots in the book. The theme, theme_statthinking() is included in the statthink library, a supplemental package to the text that can be installed and loaded with the following commands: remotes::install_github(&#39;lebebr01/statthink&#39;) ## Using bundled GitHub PAT. Please add your own PAT to the env var `GITHUB_PAT` ## Skipping install of &#39;statthink&#39; from a github remote, the SHA1 (3ffdbd68) has not changed since last install. ## Use `force = TRUE` to force installation library(statthink) ## ## Attaching package: &#39;statthink&#39; ## The following object is masked _by_ &#39;.GlobalEnv&#39;: ## ## colleges We can then change the theme in a similar manner to how we changed the theme before. gf_histogram(~ adm_rate, data = colleges, color = &#39;black&#39;, bins = 25) %&gt;% gf_labs( x = &#39;Admission Rate&#39;, y = &#39;Frequency&#39;, title = &#39;Distribution of admission rates for 2,000 institutions of higher education.&#39;, subtitle = &#39;Data Source: U.S. Department of Education College Scorecard&#39; ) %&gt;% gf_theme(theme_statthinking()) 2.2.3.1 Setting the default plot theme Since we will be using this theme for all of our plots, it is useful to make it the default theme (rather than the grey bckground with white gridlines). To set a different theme as the default, we will use the theme_set() function and call our theme_statthinking() within this function. theme_set(theme_statthinking()) Now when we create a plot, it will automatically use the statthinking theme without having to specify this in the gf_theme() function. gf_histogram(~ adm_rate, data = colleges, color = &#39;black&#39;, bins = 25) %&gt;% gf_labs( x = &#39;Admission Rate&#39;, y = &#39;Frequency&#39;, title = &#39;Distribution of admission rates for 2,000 institutions of higher education.&#39;, subtitle = &#39;Data Source: U.S. Department of Education College Scorecard&#39; ) 2.3 Density plots Another plot that is useful for exploring attributes is the density plot. This plot usually highlights similar distributional features as the histogram, but the visualization does not have the same dependency on the specification of bins. Density plots can be created with the gf_density() function which takes similar arguments as gf_histogram(), namely a formula identifying the attribute to be plotted and the data object.3 gf_density(~ adm_rate, data = colleges) Our interpretation remains that most institutions admit a high proportion of applicants. In fact, colleges that admit around 75% of their applicants have the highest probability density. The axis labels, title, subtitle can be customized with gf_labs() in the same manner as with the histogram. The color= and fill= arguments in gf_density() will color the density curve and area under the density curve, respectively. gf_density(~ adm_rate, data = colleges, color = &#39;black&#39;, fill = &#39;yellow&#39;) %&gt;% gf_labs( x = &#39;Admission Rate&#39;, y = &#39;Probability density&#39;, title = &#39;Distribution of admission rates for 2,019 institutions of higher education.&#39;, subtitle = &#39;Data Source: U.S. Department of Education College Scorecard&#39; ) This function is a part of the tidyverse package, so you need to be sure to run library(tidyverse) prior to using read_csv().↩ R knows the names of 657 colors. To see these names type colors() at the command prompt.↩ The default kernel used in gf_density() is the normal kernel.↩ "],
["descriptive-statistics-numerically-describing-the-sample-data.html", "Chapter 3 Descriptive Statistics: Numerically Describing the Sample Data 3.1 Summarizing Attributes 3.2 Understanding the Median and Mean 3.3 Numerically Summarizing Variation 3.4 Summarizing Categorical Attributes 3.5 Advanced Extension: Computing Your Own Measure of Variation", " Chapter 3 Descriptive Statistics: Numerically Describing the Sample Data Data visualization is often the first step on the statistical journey to explore a research question. However, this is usually not where the journey stops, instead additional analyses are often performed to learn more about the trends and structure in the data. In this chapter we will learn about methods that useful for numerically summarizing a sample of data. These methods are commonly referred to as descriptive statistics. We will again use the data provided in the file College-scorecard-clean.csv to examine admissions rates for 2,019 institutions of higher education. As in the previous chapter, before we begin the analysis, we will load several packages that include functions we will use in the chapter. We also import the College Scorecard data using the read_csv() function. # Load packages library(tidyverse) library(ggformula) library(mosaic) library(statthink) # Set theme for plots theme_set(theme_statthinking()) # Import the data colleges &lt;- read_csv( file = &quot;https://raw.githubusercontent.com/lebebr01/statthink/master/data-raw/College-scorecard-clean.csv&quot;, guess_max = 10000 ) # View first six cases head(colleges) ## # A tibble: 6 x 17 ## instnm city stabbr preddeg region locale adm_rate actcmmid ugds costt4_a ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alaba… Norm… AL Bachel… South… City:… 0.903 18 4824 22886 ## 2 Unive… Birm… AL Bachel… South… City:… 0.918 25 12866 24129 ## 3 Unive… Hunt… AL Bachel… South… City:… 0.812 28 6917 22108 ## 4 Alaba… Mont… AL Bachel… South… City:… 0.979 18 4189 19413 ## 5 The U… Tusc… AL Bachel… South… City:… 0.533 28 32387 28836 ## 6 Aubur… Mont… AL Bachel… South… City:… 0.825 22 4211 19892 ## # … with 7 more variables: costt4_p &lt;dbl&gt;, tuitionfee_in &lt;dbl&gt;, ## # tuitionfee_out &lt;dbl&gt;, debt_mdn &lt;dbl&gt;, grad_debt_mdn &lt;dbl&gt;, female &lt;dbl&gt;, ## # bachelor_degree &lt;dbl&gt; 3.1 Summarizing Attributes Data are often stored in a tabular format where the rows of the data are the cases and the columns are attributes. For example, in the college scorecard data (displayed above) the rows each represent a specific institution of higher education (cases) and the columns represent various attributes measured on those higher education institutions. This type of tabular representation is a common structure for storing and analyzing data. In the previous chapter, we visualized different attributes by referencing those attributes in the function we used to create a plot of the distribution. For example, when we wanted to plot a histogram of the distribution of admission rates, we referenced the adm_rate attribute in the gf_histogram() function. In a similar vein, we will obtain numerical summaries of an attribute by referencing that attribute in the df_stats() function. Below, we obtain numerical summaries for the admissions rate attribute: df_stats(~ adm_rate, data = colleges, median) ## median_adm_rate ## 1 0.7077 The df_stats() function takes a formula syntax that is the same as the formula syntax we introduced in the previous chapter. In particular, the variable that we wish to compute a statistic on is specified after the ~. We also specify the data object with the data= argument. Finally, we include additional arguments indicating the name of the particular numerical summary (or summaries) that we want to compute.4 In the syntax above, we compute the median admission rate. The median is also referred to as the 50th percentile, and is the value at which half of the admission rates in the data are above and half are below. In our data, the medain admission rate is 70.8%. In our data 1,009 institutions have an admission rate below 70.8% and 1,009 have an admission rate above 70.8%. In the histogram below, we add a vertical line at the median admission rate to help you visualize what this means. Another common numerical summary that is often used to describe a distribution is the mean. To compute the mean admission rate we again use the df_stats() function, but include mean as our additional argument. df_stats(~ adm_rate, data = colleges, mean) ## mean_adm_rate ## 1 0.6827355 The mean (or average) admission rate for the 2,019 institutions of higher education is 68.3%. 3.2 Understanding the Median and Mean In your previous educational experiences with the mean and median, you may have learned the formulas or algorithms that produce these values. For example: Mean: Add up all the values of the attribute and divide by the number of values; Median: Order all the values of the attribute from smallest to largest and find the one in the middle. If there is an even number of observations, find the mean of the middle two values. To better understand these summaries, we will visualize them on the distirbution of admission rates. Figure 3.1: Distribution of admission rates for thw 2,019 institutions of higher education. The mean admission rate is displayed as a red, dashed line. The mean (displayed as a red, dashed line) represents the &quot;balance point&quot; of the distribution. If the distribution were a physical entity, it is the location where you would put you finger underneath the distribution to balance it. In a statistical sense, we balance the distribution by &quot;balancing&quot; the deviations. To explain this, let's examine a toy data set of five observations: \\[ Y = \\begin{pmatrix}10\\\\ 10\\\\ 20\\\\ 30\\\\ 50\\end{pmatrix} \\] The mean of these five values is 24. Each of these values has a deviation which is computed as the difference between the observed value and the mean value. For the toy data, \\[ Y = \\begin{pmatrix}10 - 24\\\\ 10-24\\\\ 20-24\\\\ 30-24\\\\ 50-24\\end{pmatrix} = \\begin{pmatrix}-14\\\\ -14\\\\ -4\\\\ 6\\\\ 26\\end{pmatrix} \\] Notice that some of the deviations are negative (the observation was below the mean) and some are positive (the observation was above the mean). The mean &quot;balances&quot; these deviations since the sum of the deviations is 0. What if we had instead looked at the deviations from the median, which is 20? \\[ Y = \\begin{pmatrix}10 - 20\\\\ 10-20\\\\ 20-20\\\\ 30-20\\\\ 50-20\\end{pmatrix} = \\begin{pmatrix}-10\\\\ -10\\\\ 0\\\\ 10\\\\ 30\\end{pmatrix} \\] The median does not balance the deviations; the sum is not zero (it is \\(+20\\)). The mean is the only value we can use to &quot;balance&quot; the deviations. What about the median? In the figure, half of the observations in the histogram have an admission rate below the blue line and half have an admission rate above the blue line. The median splits the distribution into two equal areas. Note that the median is not necessarily in the middle of the values represented on the \\(x\\)-axis; that would be 0.50 rather than 0.708. It is the area under the curve (or embodied by the histogram) that is halved. 3.2.1 Summarize with the Mean or Median? The goal of summarizing the distribution numerically is to provide a value that typifies or represents the observed values of the attribute. In our example, we need a value that summarizes the 2,019 admission rates. Since the mean balances the deviations, it is the representative because it is the value that is &quot;closest&quot; (at least on average) to all of the observations. (It is the value that produces the smallest average deviation---since the sum of deviations is 0, the average deviation is also 0.) The median is representative because half of the distribution is smaller than that value and the other half is larger. But, does one represent the distribution better than the other? Figure 3.2: Distribution of the admission rates for 2,019 institutions of higher education. The mean admission rate is displayed as a red, dashed line. The median admission rate is displayed as a blue, solid line. In this example, both values are quite similar, so either would send a simlar message about the distribution of admission rates, namely that a typical admission rate for these 2,019 institutions of higher education is around 70%. Looking at the plot, we see that the mean admission rate is lower than the median admission rate. In a left-skewed distribution this will often be the case. The mean is &quot;pulled toward the tail&quot; of the distribution. This is because the mean is influenced by extreme values (which in a skewed distribution are in the tail). The median is not influenced by extreme values; we say it is robust to these values. This is because in calculating the median, only the middle score (or middle two scores) are used, so its value is not informed by the extreme values in the distribution.5 In practice, it is a good idea to compute both the mean and the median and explore whether one is more representative than the other (perhaps by plotting them on the distribution). The choice of one over the other should also be guided by substantive knowledge. 3.3 Numerically Summarizing Variation In the distribution of admission rates, both the mean and median seems to offer a representative admission rate since both are close to the modal clump of the distribution. (There are several colleges that have an admission rate close to 70%.) But, you will also notice that an admission rate of 70% does not do a great job representing all of the institutions' admissions rates. This is true for any single statistic we pick to summarize the distribution. To more fully summarize the distribution we need to summarize the variability in the distribution in addition to a &quot;typical&quot; or representative value. There are several summaries that statisticians and data scientists use to describe the variation in a distribution. And, like the representative summary measures, each of the summaries of variation provide slightly different information by highlighting different aspects of the variability. We will explore some of these measures below. 3.3.1 Range One measure of variation that you have almost surely encountered before is the range. This numerical measure is the difference between the maximum and minimum values in the data. To compute this we provide the df_stats() function with two additional arguments, min and max. Then we can compute the difference between these values. # Obtain minimum and maximum admission rate df_stats(~ adm_rate, data = colleges, min, max) ## min_adm_rate max_adm_rate ## 1 0 1 # Compute range 1 - 0 ## [1] 1 The range of the admission rates is 1. When people colloquially describe the range, they typically provide the limits of the data rather than actually providing the range. For example, they may describe the range of the admission rates as: &quot;the admission rates range from 0 to 1&quot;. While this is technially not the range (which is a single number), it is probably more descriptive as it also gives a sense of the lower- and upper-limits for the observations. One problem with the range is that if there are extreme values, the range will not give an accurate picture of the variation encompassing most observations. For example, consider the following five test scores: \\[ Y = \\begin{pmatrix}30\\\\ 35\\\\ 36\\\\ 37\\\\ 100\\end{pmatrix} \\] The range of these data is 70, indicating that the variation between the lowest and highest score is 70 points, suggesting a lot of variation in the scores. The range, however, is clearly influenced by the score of 100. Were it not for that score, we would have a much different take on the score variability; the other scores are between 30 and 37 (a range of 7), suggesting that there is not a lot of differenes in the test scores.6 While the range is perhaps not the best measure of variation, it is quite useful as a validity check on the data to ensure that the attribute's values are theoretically possible. In this case the values are all between 0 and 1, which are values that are theoretically plausible for admission rate. 3.3.2 Percentile Range One way to deal with extreme values in the sample is simply to not include them when we calculate the range. For example, instead of computing the difference between the maximum and minimum value in the data (which includes extreme values), truncate the bottom 10% and upper 10% of the data and calculate the range between the remaining maximum and minimum values. This is essentially the range of the middle 80% of the data. To compute the endpoint after truncatng the lower- and upper 10% we will use the quantile() function. This function finds the data value for an associated percentile provided to the function. If we wnat to truncate the lower- and upper 10% of a distribution we are interested in finding the values associated with the 10th and 90th percentiles. The syntax below shows two manners for obtaining these values for the admissions rate attribute. # Provide both percentiles separately colleges %&gt;% df_stats(~ adm_rate, quantile(0.10), quantile(.90)) ## 10% 90% ## 1 0.39284 0.94706 # Provide both percentiles in a single quantile() call colleges %&gt;% df_stats(~ adm_rate, quantile(c(0.1, 0.9))) ## 10% 90% ## 1 0.39284 0.94706 # Compute the range ofthe middle 80% of the data 0.94706 - 0.39284 ## [1] 0.55422 The range of admissions rates for 80% of the 2,019 institutions of higher education is 0.554. We can visualize this by adding the percentiles on the plot of the distribution of admission rates. These values seem to visually correspond to where most of the data are concentrated. Figure 3.3: Distribution of the admission rates for 2,019 institutions of higher education. The solid, red lines are placed at the 10th and 90th percentiles, respectively. 3.3.3 Interquartile Range (IQR) One percentile range that statisticians and data scientists use a great deal is the interquartile range (IQR). This range demarcates the middle 50% of the distribution; it truncates the lower and upper 25% of the values. In other words it is based on finding the range between the 25th- and the 75th-percentiles. # Obtain values for the 25th- and 75th percentiles colleges %&gt;% df_stats(~ adm_rate, quantile(c(0.25, 0.75))) ## 25% 75% ## 1 0.5524 0.83815 # Compute the IQR 0.83815 - 0.5524 ## [1] 0.28575 The range of admission rates for the middle 50% of the distribution is 28.5%. Since it is based on only 50% of the observations, the IQR no longer gives the range for &quot;most&quot; of the data, but, as shown in the plot below, this range encompasses the modal clump of institutions' admission rates and can be useful for describing the variation. Figure 3.4: Distribution of the admission rates for 2,019 institutions of higher education. The solid, red lines are placed at the 25th and 75th percentiles, respectively. Since the IQR describes the range for half of the observations, it can also be useful to compare this range with the entire range of the data. Below we compute these values and visualize them on a histogram of the distribution. # Obtain values for the 25th- and 75th percentiles colleges %&gt;% df_stats(~ adm_rate, min, quantile(c(0.25, 0.75)), max) ## min_adm_rate 25% 75% max_adm_rate ## 1 0 0.5524 0.83815 1 # Compute the IQR 0.83815 - 0.5524 ## [1] 0.28575 # Compute the range 1 - 0 ## [1] 1 Figure 3.5: Distribution of the admission rates for 2,019 institutions of higher education. The solid, red lines are placed at the 25th and 75th percentiles, respectively. The dashed, blue lines are placed at the minimum and maximum values, respectively. Although our sample of 2,019 institutions of higher education have wildy varying admissions rates (from 0% to 100%), the middle half of those institutions have admissions rates between 55% and 84%. We also note that the 25% of institutions with the lowest admissions rate range from 0% to 55%, while the 25% of institutions with the highest admissions rate range from only 84% to 100%. This means that there is more variation in the admissions rates in the institutions with the lowest admissions rate than in the institutions with the highest admissions rates. Understanding how similar the range of variation is in these areas of the distribution can give us information about the shape f the distribution. For example, the bigger range in the lowest 25% of the data suggests that the distribution has a tail on the left side. Seventy-five percent of the institutions have admissions rates higher than 50%. These two features suggest that the distribtion is left-skewed (which we also see in the histogram). When we describe the shape of a distribution, we are actually describing the variability in the data! Examining the lowest 25%, highest 25%, and middle 50% of the data is so common that a statistician named John Tukey invented a visualization technique called the box-and-whiskers plot to show these ranges. To create a box-and-whiskers plot we use the gf_boxploth() function.7 This function takes a formula that is slightly different than we have been using, namely 0 ~ attribute name. (Note that the 0 in the formula is where the box-and-whiskers plot is centered on the y-axis.) gf_boxploth(0 ~ adm_rate, data = colleges, fill = &quot;skyblue&quot;) %&gt;% gf_labs(x = &quot;Admission rate&quot;) The &quot;box&quot;, etxending from 0.55 to 0.84, depicts the interuartile range; the middle 50% of the distribution. The line near the middle of the box is the median value. The &quot;whiskers&quot; extend to either the end of the range, or the next closest observation that is not an extreme value. (There are several extreme values on the left-hand side of the distribution representing institutions with extremely low admission rates.) The length of the whisker denotes the range of the lowest 25% of the distribution and the highest 25% of the distribution. We can also display both the histogram and the box-and-whiskers plot. In the syntax below, we center the box-and-whiskers plot at \\(y=170\\). We also make the box slightly wider to display better in the plot. gf_histogram(~ adm_rate, data = colleges, bins = 30) %&gt;% gf_boxploth(170 ~ adm_rate, data = colleges, fill = &quot;skyblue&quot;, width = 10) %&gt;% gf_labs(x = &quot;Admission rate&quot;, y = &quot;Frequency&quot;) 3.3.4 Empirical Cumulative Density The percentile range plots and the boxplot indicated the values of the distribution that demarcated a particular proportion of the distribution. For example, the boxplot visually showed the admission rates that were at the 25th, 50th, and 75th percentiles. Another plot that can be useful for understanding how much of a distribution is at or below a particular value is a plot of the empirical cumulative density. To create this plot we use the gf_ecdf() function from the ggformula package. gf_ecdf(~ adm_rate, data = colleges) %&gt;% gf_labs(x = &quot;Admission rate&quot;, y = &#39;Cumulative proportion&#39;) To read this plot, we can map admission rates to their associated cumulative proportion. For example, one-quarter of the admission rates in the distribution are at or below 0.55; that is the admission rate of 0.55 has an associated cumulative proportion of 0.25. Similarly, an admission rate of 0.71 is associated with a cumulative proportion of 0.50; one-half of the admission rates in the distribution are at or below the value of 0.71. 3.3.5 Variance and Standard Deviation Two measures of variation that are commonly used by statisticians and datd scientists are the variance and the standard deviation. These can be obtained by including var and sd, respectively, in the df_stats() function. # Compute variance and standard deviation colleges %&gt;% df_stats(~ adm_rate, var, sd) ## var_adm_rate sd_adm_rate ## 1 0.04467182 0.2113571 The variance and standard deviation are related to each other in that if we square the value of the standard deviation we obtain the variance. # Square the standard deviation 0.2113571 ^ 2 ## [1] 0.04467182 In general, the standard deviation is more useful for describing the variation in a sample because it is in the same metric as the data. In our example, the metric of the data is proportion of students admitted, and the standard deviation is also in this metric. The variance, as the square of the standard deviation, is in the squared metric—in our example, proportion of students admitted squared. While this is not a useful metric in description, it does have some nice mathematical properties, so it is also a useful measure of the variation. 3.3.5.1 Understanding the Standard Deviation To understand how we interpret the standard deviation, it is useful to see how it is calculated. To do so, we will return to our toy data set: \\[ Y = \\begin{pmatrix}10 \\\\ 10\\\\ 20\\\\ 30\\\\ 50\\end{pmatrix} \\] Recall that earlier we computed the deviation from the mean for each of these observations, and that these deviations was a measure of how far above or below the mean each observation was. \\[ Y = \\begin{pmatrix}10 - 24\\\\ 10-24\\\\ 20-24\\\\ 30-24\\\\ 50-24\\end{pmatrix} = \\begin{pmatrix}-14\\\\ -14\\\\ -4\\\\ 6\\\\ 26\\end{pmatrix} \\] A useful measure of the variation in the data would be the average of these deviations. This would tell us, on average, how far from the mean the data are. Unfortunately, if we were to compute the mean we would get zero because the sum of the deviations is zero. (That was a property of the mean discussed earlier in the chapter!) To alleviate this, we square the deviations before summing them. \\[ \\begin{pmatrix}-14^2\\\\ -14^2\\\\ -4^2\\\\ 6^2\\\\ 26^2\\end{pmatrix} = \\begin{pmatrix}196\\\\ 196\\\\ 16\\\\ 36\\\\ 676\\end{pmatrix} \\] The sum of these squared deviations is 1,120. And the average squared deviation is then \\(1120/5 = 224\\). If we take the square root of 224, which is 14.97, we now have the average deviation for the five observations. On average, the observations in the distribution are 14.97 units from the mean value of 24. The standard deviation is interpreted as the average deviation from the mean.8 3.3.5.2 Using the Standard Deviation In our example, the mean admission rate for the 2,019 institutions of higher education was 68.2%, and the standard deviation was 21.1%. We can combine these two pieces of information to make a statement about the admission rates for most of the institutions in our sample. In general, most observations in a distribution fall within one standard deviation of the mean. So, for our example, most institutions have an admission rate that is between 47.1% and 89.3%.9 # 1 SD below the mean 0.682 - 0.211 ## [1] 0.471 # 1 SD above the mean 0.682 + 0.211 ## [1] 0.893 3.4 Summarizing Categorical Attributes Categorical attributes are attributes that have values that represent categories. For example, the attribute region indicates the region in the United States where the institution is located (e.g., Midwest). The attribute bachelor_degree is a categorical value indicating whether ir not the institution offers a Bachelor's degree. Sometimes statisticians anddata scientists use the terms dichotmous (two categories) and polychotomous (more than two categories) to further define categorical variables. Using this nomenclature, region is a polychotomous categorical variable and bachelor_degree is a dichotomous categorical variable. Sometimes analysts use numeric values to encode the categories of a categorical attribute. For example, the attribute bachelor_degree is encoded using the values of 0 and 1. It is important to note that these values just indicate whether the institution offers a Bachelor's degree (1) or not (0). The values are not necessarily ordinal in the sense that a 1 means more of the attribute than a 0. Since the values just refer to categories, an analyst might have reversed the coding and used 0 to encode institutions that offer a Bachelor's degree and 1 to encode those institutions that do not. Similarly, the values of 0 and 1 are not sancrosanct; any two numers could have been used to represent the categories.10 Most of the time, the numerical summaries we computed earlier in the chapter do not work so well for categorical attributes. For example, it would not make sense to compute the mean region for the institutions. In general, it suffices to compute counts and proportions for the categories included in these attributes. To compute the category counts we use the tally() function. This function takes a formula indicating the name of the categorical attribute and the name of the data object. To find the category counts for the region attribute: # Compute category counts tally(~region, data = colleges) ## region ## Far West Great Lakes Mid East New England ## 221 297 458 167 ## Outlying Areas Plains Rocky Mountains Southeast ## 35 200 50 454 ## Southwest US Service Schools ## 133 4 To find the proportion of institutions in each region, we can divide each of the counts by 2,019. # Compute category proportions tally(~region, data = colleges) / 2019 ## region ## Far West Great Lakes Mid East New England ## 0.109460129 0.147102526 0.226844973 0.082714215 ## Outlying Areas Plains Rocky Mountains Southeast ## 0.017335315 0.099058940 0.024764735 0.224863794 ## Southwest US Service Schools ## 0.065874195 0.001981179 You could also compute the proportions directly with the tally() function by specifying the argument format = &quot;proportion&quot;. # Compute category proportions tally(~region, data = colleges, format = &quot;proportion&quot;) ## region ## Far West Great Lakes Mid East New England ## 0.109460129 0.147102526 0.226844973 0.082714215 ## Outlying Areas Plains Rocky Mountains Southeast ## 0.017335315 0.099058940 0.024764735 0.224863794 ## Southwest US Service Schools ## 0.065874195 0.001981179 3.5 Advanced Extension: Computing Your Own Measure of Variation If you have another non-standard measure of variation that you want to compute, you can always write your own function to compute it. For example, say you wanted to compute the mean absolute error (the mean of the absolute values of the deviations). To compute the mean absolute error, we first need to define a new function. mae &lt;- function(x, na.rm = TRUE, ...) { avg &lt;- mean(x, na.rm = na.rm, ...) abs_avg &lt;- abs(x - avg) mean(abs_avg) } We can now use this new function by employing it as an argument in the df_stats() function. colleges %&gt;% df_stats(~ adm_rate, mae) ## mae_adm_rate ## 1 0.1692953 Note that the names of the summaries we include in the df_stats() function need to be the actual names of functions that R recognizes.↩ The downside of using the median is that it is only informed by one or two observations in the data. The mean is informed by all of the observations. This property of the mean makes it a more useful than the median in some mathematical and theoretical applications.↩ A second issue with range is that it is a biased statistic. If we use it as an estimate of the population range, it will almose inevitably be too small. The population range will almost always be larger since the sampling process will often not select extreme population values.↩ The gf_boxplot() function creates vertical a box-and-whiskers plot, and the gf_boxploth() function creates a horizontal box-and-whiskers plot.↩ Technically, after summing the squared deviations, we divide this sum by \\(n-1\\) rather than \\(n\\). But, when the sample size is even somewhat large, this difference is trivial.↩ If we know the exact shape of the distribution we can be more specific about the proportion of the distribution that fall within one standard deviation of the mean.↩ Using 0's and 1's for the encoding does have some advantages over other coding schemes which we will explore later when fitting statistical models.↩ "],
["multivariate-visualization.html", "Chapter 4 Multivariate Visualization 4.1 Facetting 4.2 Considering Groups 4.3 Other statistics of center 4.4 Measures of Variation", " Chapter 4 Multivariate Visualization library(tidyverse) library(ggformula) library(statthink) # Add plot theme theme_set(theme_statthinking()) # Import data head(us_weather) ## # A tibble: 6 x 34 ## station date dewpoint_avg drybulbtemp_avg relativehumidit… ## &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 7.25e10 2018-10-01 23:59:00 51 52 95 ## 2 7.25e10 2018-10-02 23:59:00 59 60 96 ## 3 7.25e10 2018-10-03 23:59:00 55 62 86 ## 4 7.25e10 2018-10-04 23:59:00 56 60 77 ## 5 7.25e10 2018-10-05 23:59:00 43 51 75 ## 6 7.25e10 2018-10-06 23:59:00 62 63 90 ## # … with 29 more variables: sealevelpressure_avg &lt;dbl&gt;, ## # stationpressure_avg &lt;dbl&gt;, wetbulbtemp_avg &lt;dbl&gt;, windspeed_avg &lt;dbl&gt;, ## # cooling_degree_days &lt;dbl&gt;, departure_from_normal_temperature &lt;dbl&gt;, ## # heating_degree_days &lt;dbl&gt;, drybulbtemp_max &lt;dbl&gt;, drybulbtemp_min &lt;dbl&gt;, ## # peak_wind_direction &lt;dbl&gt;, peak_wind_speed &lt;dbl&gt;, precipitation &lt;dbl&gt;, ## # snow_depth &lt;dbl&gt;, snowfall &lt;dbl&gt;, wind_direction &lt;dbl&gt;, wind_speed &lt;dbl&gt;, ## # weather_occurances &lt;chr&gt;, sunrise &lt;dbl&gt;, sunset &lt;dbl&gt;, month &lt;dbl&gt;, ## # year &lt;dbl&gt;, day &lt;int&gt;, winter_group &lt;chr&gt;, location &lt;chr&gt;, fog &lt;dbl&gt;, ## # mist &lt;dbl&gt;, drizzle &lt;dbl&gt;, rain &lt;dbl&gt;, snow &lt;dbl&gt; Real world data are never as simple as exploring a distribution of a single variable, particularly when trying to understand individual variation. In most cases things interact, move in tandem, and many phenomena help to explain the variable of interest. For example, when thinking about admission rates, what may be some important factors that would explain some of the reasons why higher education institutions differ in their admission rates? Take a few minutes to brainstorm some ideas. gf_histogram(~ drybulbtemp_avg, data = us_weather, bins = 30) %&gt;% gf_labs(x = &quot;Average daily temperature, in Fahrenheit&quot;, title = &quot;Univariate distribution of average daily temperature&quot;) gf_histogram(~ drybulbtemp_avg, data = us_weather, bins = 30, fill = ~ factor(snow)) %&gt;% gf_labs(x = &quot;Average daily temperature, in Fahrenheit&quot;, title = &quot;Multivariate distribution of average daily temperature by whether it snowed that day&quot;, fill = &quot;&quot;) Often density plots are easier to visualize when there are more than one group. To plot more than one density curve, we need to specify the color argument instead of fill. gf_density(~ drybulbtemp_avg, data = us_weather, size = 1, color = ~ factor(snow)) %&gt;% gf_labs(x = &quot;Average daily temperature, in Fahrenheit&quot;, title = &quot;Multivariate distribution of average daily temperature by whether it snowed that day&quot;, color = &quot;&quot;) gf_density(~ drybulbtemp_avg, data = us_weather, size = 1, fill = ~ factor(snow)) %&gt;% gf_labs(x = &quot;Average daily temperature, in Fahrenheit&quot;, title = &quot;Multivariate distribution of average daily temperature by whether it snowed that day&quot;, fill = &quot;&quot;) gf_density(~ drybulbtemp_avg, data = us_weather, color = ~ factor(snow), fill = ~ factor(snow), size = 1) %&gt;% gf_labs(x = &quot;Average daily temperature, in Fahrenheit&quot;, title = &quot;Multivariate distribution of average daily temperature by whether it snowed that day&quot;, fill = &quot;&quot;, color = &quot;&quot;) gf_density(~ drybulbtemp_avg, data = us_weather, color = ~ factor(snow), fill = &#39;gray75&#39;, size = 1) %&gt;% gf_labs(x = &quot;Average daily temperature, in Fahrenheit&quot;, title = &quot;Multivariate distribution of average daily temperature by whether it snowed that day&quot;, color = &quot;&quot;) ## Violin Plots Violin plots are another way to make comparisons of distributions across groups. Violin plots are also easier to show more groups on a single graph. Violin plots are density plots that are mirrored to be fully enclosed. Best to explore with an example. gf_violin(drybulbtemp_avg ~ snow, data = us_weather) %&gt;% gf_labs(y = &quot;Average daily temperature, in Fahrenheit&quot;, title = &#39;Multivariate distribution of average daily temperature by whether it snowed that day&#39;, x = &quot;Snow?&quot;) gf_violin(drybulbtemp_avg ~ snow, data = us_weather) %&gt;% gf_labs(y = &quot;Average daily temperature, in Fahrenheit&quot;, title = &#39;Multivariate distribution of average daily temperature by whether it snowed that day&#39;, x = &quot;Snow?&quot;) %&gt;% gf_refine(coord_flip()) Aesthetically, these figures are a bit more pleasing to look at if they include a light fill color. This is done similar to the density plots shown above with the fill = argument. gf_violin(drybulbtemp_avg ~ snow, data = us_weather, fill = &#39;gray85&#39;) %&gt;% gf_labs(y = &quot;Average daily temperature, in Fahrenheit&quot;, title = &#39;Multivariate distribution of average daily temperature by whether it snowed that day&#39;, x = &quot;Snow?&quot;) %&gt;% gf_refine(coord_flip()) Adding quantiles are useful to aid in the comparison with the violin plots. These can be added with the draw_quantiles argument. gf_violin(drybulbtemp_avg ~ snow, data = us_weather, fill = &#39;gray85&#39;, draw_quantiles = c(0.1, 0.5, 0.9)) %&gt;% gf_labs(y = &quot;Average daily temperature, in Fahrenheit&quot;, title = &#39;Multivariate distribution of average daily temperature by whether it snowed that day&#39;, x = &quot;Snow?&quot;) %&gt;% gf_refine(coord_flip()) ### Violin Plots with many groups Many groups are more easily shown in the violin plot framework. With many groups, it is often of interest to put the long x-axis labels representing each group on the y-axis so that it reads the correct direction and the labels do not run into each other. This can be done with the gf_refine() function with coord_flip(). gf_violin(drybulbtemp_avg ~ location, data = us_weather, fill = &#39;gray85&#39;, draw_quantiles = c(.1, .5, .9)) %&gt;% gf_labs(y = &quot;Average daily temperature, in Fahrenheit&quot;, title = &#39;Multivariate distribution of average daily temperature by location&#39;, x = &quot;Location&quot;) %&gt;% gf_refine(coord_flip()) 4.1 Facetting Facetting is another way to explore distributions of two or more variables. gf_violin(drybulbtemp_avg ~ location, data = us_weather, fill = &#39;gray85&#39;, draw_quantiles = c(.1, .5, .9)) %&gt;% gf_labs(y = &quot;Average daily temperature, in Fahrenheit&quot;, title = &#39;Multivariate distribution of average daily temperature by location&#39;, x = &quot;Location&quot;) %&gt;% gf_refine(coord_flip()) %&gt;% gf_facet_wrap(~ snow) 4.2 Considering Groups We've spent a lot of time trying to reason about other variables that may be important in explaining variation in our variable of interest. So far we have only explored the variable without considering other variables, in practice that is not that useful. Instead, it is common to compute conditional statistics based on other characteristics in the data. An example may help to show the idea more clearly. us_weather %&gt;% df_stats(drybulbtemp_max ~ location, median) ## location median_drybulbtemp_max ## 1 Boston, MA 48 ## 2 Buffalo, NY 42 ## 3 Chicago, IL 43 ## 4 Detroit, MI 45 ## 5 Duluth, MN 33 ## 6 Iowa City, IA 46 ## 7 Minneapolis, MN 38 ## 8 Portland, ME 43 Presented above are the conditional medians for the higher education institutions in different areas of the country. More specifically, the data are essentially split into subgroups and the median is computed for each of those subgroups instead of pooling all institutions into a single data frame. The formula syntax is now outcome ~ grouping where the variable of interest (i.e. commonly a numeric variable) and the variable to the right of the ~ is the grouping variable. This syntax is similar to the violin plots that were created earlier. Can you see differences in the admission rates across the regions? One thing that is useful to add in when computing conditional statisics, is how many data points are in each group. This is particularly useful when the groups are different sizes, which is common. To do this, we can add another function to the df_stats() function. us_weather %&gt;% df_stats(drybulbtemp_max ~ location, median, length) ## location median_drybulbtemp_max length_drybulbtemp_max ## 1 Boston, MA 48 425 ## 2 Buffalo, NY 42 425 ## 3 Chicago, IL 43 425 ## 4 Detroit, MI 45 425 ## 5 Duluth, MN 33 425 ## 6 Iowa City, IA 46 425 ## 7 Minneapolis, MN 38 425 ## 8 Portland, ME 43 425 This adds another columns which represents the number of observations that went into the median calculation for each group. The syntax above also shows that you can add additional functions separated by a comma in the df_stats() function and are not limited to a single function. We will take advantage of this feature later on. 4.2.1 Adding additional groups What if we thought more than one variable was important in explaining variation in the outcome variable? These can also be added to the df_stats() function for additional conditional statistics. The key is to add another variable to the right-hand side of the formula argument. More than one variable are separated with a + symbol. us_weather %&gt;% df_stats(drybulbtemp_max ~ location + month, median, length) ## location month median_drybulbtemp_max length_drybulbtemp_max ## 1 Boston, MA 1 42.0 62 ## 2 Buffalo, NY 1 35.0 62 ## 3 Chicago, IL 1 33.5 62 ## 4 Detroit, MI 1 35.0 62 ## 5 Duluth, MN 1 21.0 62 ## 6 Iowa City, IA 1 32.0 62 ## 7 Minneapolis, MN 1 25.5 62 ## 8 Portland, ME 1 35.5 62 ## 9 Boston, MA 2 42.0 57 ## 10 Buffalo, NY 2 35.0 57 ## 11 Chicago, IL 2 35.0 57 ## 12 Detroit, MI 2 35.0 57 ## 13 Duluth, MN 2 23.0 57 ## 14 Iowa City, IA 2 34.0 57 ## 15 Minneapolis, MN 2 26.0 57 ## 16 Portland, ME 2 37.0 57 ## 17 Boston, MA 3 46.0 62 ## 18 Buffalo, NY 3 43.5 62 ## 19 Chicago, IL 3 47.0 62 ## 20 Detroit, MI 3 46.0 62 ## 21 Duluth, MN 3 37.0 62 ## 22 Iowa City, IA 3 50.0 62 ## 23 Minneapolis, MN 3 43.0 62 ## 24 Portland, ME 3 44.0 62 ## 25 Boston, MA 4 54.0 60 ## 26 Buffalo, NY 4 50.0 60 ## 27 Chicago, IL 4 57.5 60 ## 28 Detroit, MI 4 58.0 60 ## 29 Duluth, MN 4 46.0 60 ## 30 Iowa City, IA 4 61.0 60 ## 31 Minneapolis, MN 4 54.5 60 ## 32 Portland, ME 4 52.5 60 ## 33 Boston, MA 10 62.5 62 ## 34 Buffalo, NY 10 58.0 62 ## 35 Chicago, IL 10 58.0 62 ## 36 Detroit, MI 10 60.5 62 ## 37 Duluth, MN 10 47.5 62 ## 38 Iowa City, IA 10 60.0 62 ## 39 Minneapolis, MN 10 52.0 62 ## 40 Portland, ME 10 58.5 62 ## 41 Boston, MA 11 49.0 60 ## 42 Buffalo, NY 11 41.5 60 ## 43 Chicago, IL 11 40.0 60 ## 44 Detroit, MI 11 41.0 60 ## 45 Duluth, MN 11 30.0 60 ## 46 Iowa City, IA 11 42.5 60 ## 47 Minneapolis, MN 11 33.5 60 ## 48 Portland, ME 11 42.5 60 ## 49 Boston, MA 12 42.0 62 ## 50 Buffalo, NY 12 37.5 62 ## 51 Chicago, IL 12 41.0 62 ## 52 Detroit, MI 12 41.0 62 ## 53 Duluth, MN 12 28.0 62 ## 54 Iowa City, IA 12 41.0 62 ## 55 Minneapolis, MN 12 32.0 62 ## 56 Portland, ME 12 36.0 62 4.3 Other statistics of center So far we have been discussing the median. The median attempts to provide a single number summary for the center of the distribution. It is a robust statistic, but likely isn't the most popular statistic to provide a location for the center of a distribution. The mean is often more commonly used as a measure of the center of a distribution. Part of this is due to the usage of the mean in common statistical methods and the mean also uses the values of all the data in the calculation. The median only considers the values of the middle score or scores, therefore this statistic is less sensitive to extreme values than the mean. I like to look at both statistics and this can provide some insight into the distribution of interest. We can add the mean using the df_stats() function by adding the function mean. stats_compute &lt;- us_weather %&gt;% df_stats(drybulbtemp_max ~ location, median, mean, length) stats_compute ## location median_drybulbtemp_max mean_drybulbtemp_max ## 1 Boston, MA 48 49.11294 ## 2 Buffalo, NY 42 43.77176 ## 3 Chicago, IL 43 44.84706 ## 4 Detroit, MI 45 45.63529 ## 5 Duluth, MN 33 33.23765 ## 6 Iowa City, IA 46 45.40471 ## 7 Minneapolis, MN 38 38.08471 ## 8 Portland, ME 43 43.96000 ## length_drybulbtemp_max ## 1 425 ## 2 425 ## 3 425 ## 4 425 ## 5 425 ## 6 425 ## 7 425 ## 8 425 Do you notice any trends in the direction the mean and median typically follow? More specifically, is the mean typically larger than the median or vice versa? Let's visualize them. gf_histogram(~ drybulbtemp_max, data = us_weather, bins = 30) %&gt;% gf_facet_wrap(~ location) %&gt;% gf_vline(color = &#39;blue&#39;, xintercept = ~ median_drybulbtemp_max, data = stats_compute, size = 1) %&gt;% gf_vline(color = &#39;lightblue&#39;, xintercept = ~ mean_drybulbtemp_max, data = stats_compute, size = 1) %&gt;% gf_labs(x = &#39;Maxmimum daily temperature&#39;) What is different about the distributions that have larger differences in the mean and median? 4.4 Measures of Variation So far we have focused primarily on applying functions to columns of data to provide a single numeric summary for where the center of the distribution may lie. The center of the distribution is important, however the primary goal in research and with statistics is to try to understand the variation in the distribution. One crude measure of variation that is intuitive is the range of a variable. The range is the difference between the smallest and the largest number in the data. We can compute this with the df_stats() function. us_weather %&gt;% df_stats(~ drybulbtemp_max, range) ## range_drybulbtemp_max_1 range_drybulbtemp_max_2 ## 1 -14 89 The details of the df_stats() function are in the previous course notes. The output for this computation returns two values, the minimum and maximum value in the data and unsurprisingly, is 0 and 1 respectively. 4.4.1 Robust measure of variation The idea behind the IQR representing differences in percentiles allows us to extend this to different percentiles that may be more directly interpretable for a given situation. For example, suppose we wanted to know how spread out the middle 80% of the distribution is. We can do this directly by computing the 90th and 10th percentiles and finding the difference between the two. mid_80 &lt;- us_weather %&gt;% df_stats(~ drybulbtemp_max, quantile(c(0.1, 0.9)), nice_names = TRUE) mid_80 ## X10. X90. ## 1 25 62 As you can see, once you extend the amount of the distribution contained, the distance increases, now to 0.555 or 55.5% the the range of the middle 80% of the admission rate distribution. We can also visualize what this looks like. gf_histogram(~ drybulbtemp_max, data = us_weather, bins = 30, color = &#39;black&#39;) %&gt;% gf_vline(color = &#39;blue&#39;, xintercept = ~ value, data = gather(mid_80), size = 1) %&gt;% gf_labs(x = &#39;Maxmimum daily temperature&#39;) We can also view the exact percentages using the empirical cumulative density function. gf_ecdf(~ drybulbtemp_max, data = us_weather) %&gt;% gf_vline(color = &#39;blue&#39;, xintercept = ~ value, data = gather(mid_80), size = 1) %&gt;% gf_labs(x = &#39;Maxmimum daily temperature&#39;) 4.4.2 Variation by Group These statistics can also be calculated by different grouping variables similar to what was done with statisitcs of center. Now the variable of interest is on the left-hand side of the equation and the grouping variable is on the right hand side. iqr_groups &lt;- us_weather %&gt;% df_stats(drybulbtemp_max ~ location, IQR, quantile(c(0.25, 0.75)), nice_names = TRUE) iqr_groups ## location IQR_drybulbtemp_max X25. X75. ## 1 Boston, MA 16 41 57 ## 2 Buffalo, NY 17 35 52 ## 3 Chicago, IL 18 35 53 ## 4 Detroit, MI 18 36 54 ## 5 Duluth, MN 18 24 42 ## 6 Iowa City, IA 22 34 56 ## 7 Minneapolis, MN 21 28 49 ## 8 Portland, ME 16 36 52 This can also be visualized to see how these statistics vary across the groups. gf_histogram(~ drybulbtemp_max, data = us_weather, bins = 30, color = &#39;black&#39;) %&gt;% gf_vline(color = &#39;blue&#39;, xintercept = ~ value, data = filter(pivot_longer(iqr_groups, IQR_drybulbtemp_max:&#39;X75.&#39;), name %in% c(&#39;X25.&#39;, &#39;X75.&#39;)), size = 1) %&gt;% gf_facet_wrap(~ location) %&gt;% gf_labs(x = &#39;Maxmimum daily temperature&#39;) gf_ecdf(~ drybulbtemp_max, data = us_weather) %&gt;% gf_vline(color = &#39;blue&#39;, xintercept = ~ value, data = filter(pivot_longer(iqr_groups, IQR_drybulbtemp_max:&#39;X75.&#39;), name %in% c(&#39;X25.&#39;, &#39;X75.&#39;)), size = 1) %&gt;% gf_facet_wrap(~ location) %&gt;% gf_labs(x = &#39;Maxmimum daily temperature&#39;) "],
["classification.html", "Chapter 5 Classification 5.1 Topic: Decision Trees", " Chapter 5 Classification In this example, we will explore data from the titanic that comes from Kaggle (https://www.kaggle.com/c/titanic/data). You can view the attributes in the data from the link previous. The following set of code will install a couple a new packages that we will utilize for this section of the course, the titanic package has the data we will use and the rpart package includes functions to perform the tree based models we will employ. 5.1 Topic: Decision Trees library(tidyverse) library(ggformula) library(mosaic) library(titanic) library(rpart) library(rsample) library(rpart.plot) library(statthink) theme_set(theme_statthinking()) titanic &lt;- bind_rows(titanic_train, titanic_test) %&gt;% mutate(survived = ifelse(Survived == 1, &#39;Survived&#39;, &#39;Died&#39;)) %&gt;% select(-Survived) %&gt;% drop_na(survived) head(titanic) ## PassengerId Pclass Name Sex ## 1 1 3 Braund, Mr. Owen Harris male ## 2 2 1 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female ## 3 3 3 Heikkinen, Miss. Laina female ## 4 4 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female ## 5 5 3 Allen, Mr. William Henry male ## 6 6 3 Moran, Mr. James male ## Age SibSp Parch Ticket Fare Cabin Embarked survived ## 1 22 1 0 A/5 21171 7.2500 S Died ## 2 38 1 0 PC 17599 71.2833 C85 C Survived ## 3 26 0 0 STON/O2. 3101282 7.9250 S Survived ## 4 35 1 0 113803 53.1000 C123 S Survived ## 5 35 0 0 373450 8.0500 S Died ## 6 NA 0 0 330877 8.4583 Q Died count(titanic, survived) ## Warning: `count_()` is deprecated as of dplyr 0.7.0. ## Please use `count()` instead. ## See vignette(&#39;programming&#39;) for more help ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_warnings()` to see where this warning was generated. ## survived n ## 1 Died 549 ## 2 Survived 342 gf_bar(~ survived, data = titanic) 5.1.1 Fitting a Classification Tree Let's class_tree our first classification tree to predict the dichotomous attribute, survival. For this, we will use the rpart() function from the rpart package. The first argument to the rpart() function is a formula where the outcome of interest is specified to the left of the ~ and the attributes that are predictive of the outcome are specified to the right of the ~ separated with + signs. The second argument specifies the method for which we want to run the analysis, in this case we want to classify individuals based on the values in the data, therefore we specify method = 'class'. The final argument is the data element, in this case titanic. In this example, I picked a handful of attributes that would seem important. These can either be numeric or represent categories, the method does not care the type of attributes that are included in the analysis. Notice that I save the computation to the object, class_tree. class_tree &lt;- rpart(survived ~ Pclass + Sex + Age + Fare + Embarked + SibSp + Parch, method = &#39;class&#39;, data = titanic) rpart.plot(class_tree, roundint = FALSE, type = 3, branch = .3) rpart.rules(class_tree, cover = TRUE) ## survived cover ## 0.11 when Sex is male &amp; Age &lt; 6.5 &amp; SibSp &gt;= 3 1% ## 0.11 when Sex is female &amp; Pclass &gt;= 3 &amp; Fare &gt;= 23 3% ## 0.17 when Sex is male &amp; Age &gt;= 6.5 62% ## 0.30 when Sex is female &amp; Pclass &gt;= 3 &amp; Fare is 18 to 23 &amp; Embarked is S 1% ## 0.41 when Sex is female &amp; Pclass &gt;= 3 &amp; Fare &lt; 11 &amp; Embarked is S 4% ## 0.70 when Sex is female &amp; Pclass &gt;= 3 &amp; Fare &lt; 23 &amp; Embarked is C or Q 6% ## 0.81 when Sex is female &amp; Pclass &gt;= 3 &amp; Fare is 11 to 18 &amp; Embarked is S 2% ## 0.95 when Sex is female &amp; Pclass &lt; 3 19% ## 1.00 when Sex is male &amp; Age &lt; 6.5 &amp; SibSp &lt; 3 2% 5.1.2 Pruning Trees One downside of decision trees, is that they can tend to overfit the data and capitalize on chance variation in our sample that we can not generalize to another sample. This means that there are features in the current sample that would not be present in another sample of data. There are a few ways to overcome this, one is to prune the tree to only include the attributes that are most important and improve the classification accuracy. One measure of this can be used is called the complexity parameter (CP) and this statistic attempts to balance the tree complexity related to how strongly the levels of the tree improve the classification accuracy. We can view these statistics with the printcp() and plotcp() functions where the only argument to be specified is the classification tree computation that was saved in the previous step. printcp(class_tree) ## ## Classification tree: ## rpart(formula = survived ~ Pclass + Sex + Age + Fare + Embarked + ## SibSp + Parch, data = titanic, method = &quot;class&quot;) ## ## Variables actually used in tree construction: ## [1] Age Embarked Fare Pclass Sex SibSp ## ## Root node error: 342/891 = 0.38384 ## ## n= 891 ## ## CP nsplit rel error xerror xstd ## 1 0.444444 0 1.00000 1.00000 0.042446 ## 2 0.030702 1 0.55556 0.55556 0.035750 ## 3 0.023392 3 0.49415 0.53216 0.035188 ## 4 0.020468 4 0.47076 0.52339 0.034970 ## 5 0.010234 5 0.45029 0.50292 0.034448 ## 6 0.010000 8 0.41813 0.50877 0.034599 plotcp(class_tree) prune_class_tree &lt;- prune(class_tree, cp = .02) rpart.plot(prune_class_tree, roundint = FALSE, type = 3, branch = .3) 5.1.3 Accuracy titanic_predict &lt;- titanic %&gt;% mutate(tree_predict = predict(prune_class_tree, type = &#39;class&#39;)) %&gt;% cbind(predict(prune_class_tree, type = &#39;prob&#39;)) head(titanic_predict, n = 20) ## PassengerId Pclass Name ## 1 1 3 Braund, Mr. Owen Harris ## 2 2 1 Cumings, Mrs. John Bradley (Florence Briggs Thayer) ## 3 3 3 Heikkinen, Miss. Laina ## 4 4 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) ## 5 5 3 Allen, Mr. William Henry ## 6 6 3 Moran, Mr. James ## 7 7 1 McCarthy, Mr. Timothy J ## 8 8 3 Palsson, Master. Gosta Leonard ## 9 9 3 Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) ## 10 10 2 Nasser, Mrs. Nicholas (Adele Achem) ## 11 11 3 Sandstrom, Miss. Marguerite Rut ## 12 12 1 Bonnell, Miss. Elizabeth ## 13 13 3 Saundercock, Mr. William Henry ## 14 14 3 Andersson, Mr. Anders Johan ## 15 15 3 Vestrom, Miss. Hulda Amanda Adolfina ## 16 16 2 Hewlett, Mrs. (Mary D Kingcome) ## 17 17 3 Rice, Master. Eugene ## 18 18 2 Williams, Mr. Charles Eugene ## 19 19 3 Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele) ## 20 20 3 Masselmani, Mrs. Fatima ## Sex Age SibSp Parch Ticket Fare Cabin Embarked survived ## 1 male 22 1 0 A/5 21171 7.2500 S Died ## 2 female 38 1 0 PC 17599 71.2833 C85 C Survived ## 3 female 26 0 0 STON/O2. 3101282 7.9250 S Survived ## 4 female 35 1 0 113803 53.1000 C123 S Survived ## 5 male 35 0 0 373450 8.0500 S Died ## 6 male NA 0 0 330877 8.4583 Q Died ## 7 male 54 0 0 17463 51.8625 E46 S Died ## 8 male 2 3 1 349909 21.0750 S Died ## 9 female 27 0 2 347742 11.1333 S Survived ## 10 female 14 1 0 237736 30.0708 C Survived ## 11 female 4 1 1 PP 9549 16.7000 G6 S Survived ## 12 female 58 0 0 113783 26.5500 C103 S Survived ## 13 male 20 0 0 A/5. 2151 8.0500 S Died ## 14 male 39 1 5 347082 31.2750 S Died ## 15 female 14 0 0 350406 7.8542 S Died ## 16 female 55 0 0 248706 16.0000 S Survived ## 17 male 2 4 1 382652 29.1250 Q Died ## 18 male NA 0 0 244373 13.0000 S Survived ## 19 female 31 1 0 345763 18.0000 S Died ## 20 female NA 0 0 2649 7.2250 C Survived ## tree_predict Died Survived ## 1 Died 0.83182640 0.1681736 ## 2 Survived 0.05294118 0.9470588 ## 3 Survived 0.41025641 0.5897436 ## 4 Survived 0.05294118 0.9470588 ## 5 Died 0.83182640 0.1681736 ## 6 Died 0.83182640 0.1681736 ## 7 Died 0.83182640 0.1681736 ## 8 Died 0.88888889 0.1111111 ## 9 Survived 0.41025641 0.5897436 ## 10 Survived 0.05294118 0.9470588 ## 11 Survived 0.41025641 0.5897436 ## 12 Survived 0.05294118 0.9470588 ## 13 Died 0.83182640 0.1681736 ## 14 Died 0.83182640 0.1681736 ## 15 Survived 0.41025641 0.5897436 ## 16 Survived 0.05294118 0.9470588 ## 17 Died 0.88888889 0.1111111 ## 18 Died 0.83182640 0.1681736 ## 19 Survived 0.41025641 0.5897436 ## 20 Survived 0.41025641 0.5897436 titanic_predict %&gt;% count(survived, tree_predict) ## survived tree_predict n ## 1 Died Died 492 ## 2 Died Survived 57 ## 3 Survived Died 97 ## 4 Survived Survived 245 gf_bar(~ survived, fill = ~tree_predict, data = titanic_predict) gf_bar(~ survived, fill = ~tree_predict, data = titanic_predict, position = &quot;fill&quot;) %&gt;% gf_labs(y = &#39;Proportion&#39;) %&gt;% gf_refine(scale_y_continuous(breaks = seq(0, 1, .1))) titanic_predict %&gt;% mutate(same_class = ifelse(survived == tree_predict, 1, 0)) %&gt;% df_stats(~ same_class, mean, sum) ## mean_same_class sum_same_class ## 1 0.8271605 737 5.1.4 Comparison to Baseline titanic_predict &lt;- titanic_predict %&gt;% mutate(tree_predict_full = predict(class_tree, type = &#39;class&#39;)) titanic_predict %&gt;% count(survived, tree_predict_full) ## survived tree_predict_full n ## 1 Died Died 521 ## 2 Died Survived 28 ## 3 Survived Died 115 ## 4 Survived Survived 227 gf_bar(~ survived, fill = ~tree_predict_full, data = titanic_predict, position = &quot;fill&quot;) %&gt;% gf_labs(y = &quot;proportion&quot;) %&gt;% gf_refine(scale_y_continuous(breaks = seq(0, 1, .1))) titanic_predict %&gt;% mutate(same_class = ifelse(survived == tree_predict_full, 1, 0)) %&gt;% df_stats(~ same_class, mean, sum) ## mean_same_class sum_same_class ## 1 0.8395062 748 5.1.4.1 Absolute vs Relative Comparison 5.1.5 Training/Test Data So far we have used the entire data to make our classification. This is not best practice and we will explore this is a bit more detail. First, take a minute to hypothesize why using the entire data to make our classification prediction may not be the best? It is common to split the data prior to fitting a classification/prediction model into a training data set in which the model makes a series of predictions on the data, learns which data attributes are the most important, etc. Then, upon successfully identifying a useful model with the training data, test these model predictions on data that the model has not seen before. This is particularly important as the algorithms to make the predictions are very good at understanding and exploiting small differences in the data used to fit the model. Therefore, exploring the extent to which the model does a good job on data the model has not seen is a better test to the utility of the model. We will explore in more detail the impact of not using the training/test data split later, but first, let's refit the classification tree to the titanic data by splitting the data into 70% training and 30% test data. Why 70% training and 30% test? This is a number that is sometimes used as the splitting, an 80/20 split is also common. The main idea behind the making the test data smaller is so that the model has more data to train on initially to understand the attributes from the data. Secondly, the test data does not need to be quite as large, but we would like it to be representative. Here, the data are not too large, about 1000 passengers with available survival data, therefore, withholding more data helps to ensure the test data is representative of the 1000 total passengers. Splitting the data into training/test This is done with the rsample package utilizing three functions, initial_split(), training(), and test(). The initial_split() function helps to take the initial random sample and the proportion of data to use for the training data is initially identified. The random sample is done without replacement meaning that the data are randomly selected, but can not show up in the data more than once. Then, after using the initial_split() function, the training() and test() functions are used on the resulting output from initial_split() to obtain the training and test data respectively. It is good practice to use the set.seed() function to save the seed that was used as this is a random process. Without using the set.seed() function, the same split of data would likely not be able to be recreated in the code was ran again. Let's do the data splitting. titanic &lt;- bind_rows(titanic_train, titanic_test) %&gt;% mutate(survived = ifelse(Survived == 1, &#39;Survived&#39;, &#39;Died&#39;)) %&gt;% drop_na(survived) set.seed(2019) titanic_split &lt;- initial_split(titanic, prop = .7) titanic_train &lt;- training(titanic_split) titanic_test &lt;- testing(titanic_split) class_tree &lt;- rpart(survived ~ Pclass + Sex + Age + Fare + Embarked + SibSp + Parch, method = &#39;class&#39;, data = titanic_train) rpart.plot(class_tree, roundint = FALSE, type = 3, branch = .3) prune_class_tree &lt;- prune(class_tree, cp = .02) rpart.plot(prune_class_tree, roundint = FALSE, type = 3, branch = .3) This seems like a reasonable model. Let's check the model accuracy. titanic_predict &lt;- titanic_train %&gt;% mutate(tree_predict = predict(prune_class_tree, type = &#39;class&#39;)) titanic_predict %&gt;% mutate(same_class = ifelse(survived == tree_predict, 1, 0)) %&gt;% df_stats(~ same_class, mean, sum) ## mean_same_class sum_same_class ## 1 0.8445513 527 This is actually slightly better accuracy compared to the model last time, about xxx compared to about xxx prediction accuracy. But, let's test the model out on the test data to see the prediction accuracy for the test data, the real test. titanic_predict_test &lt;- titanic_test %&gt;% mutate(tree_predict = predict(prune_class_tree, newdata = titanic_test, type = &#39;class&#39;)) titanic_predict_test %&gt;% mutate(same_class = ifelse(survived == tree_predict, 1, 0)) %&gt;% df_stats(~ same_class, mean, sum) ## mean_same_class sum_same_class ## 1 0.7827715 209 For the test data, prediction accuracy was quite a bit lower, about xxx. 5.1.6 Introduction to resampling/bootstrap To explore these ideas in more detail, it will be helpful to use a statistical technique called resampling or the bootstrap. We will use these ideas a lot going forward in this course. In very simple terminology, resampling or the bootstrap can help us understand uncertainty in our estimates and also allow us to be more flexible in the statistics that we run. The main drawback of resampling and bootstrap methods is that they can be computationally heavy, therefore depending on the situation, more time is needed to come to the conclusion desired. Resampling and bootstrap methods use the sample data we have and perform the sampling procedure again treating the sample we have data for as the population. Generating the new samples is done with replacement (more on this later). This resampling is done many times (100, 500, 1000, etc.) with more in general being better. As an example with the titanic data, let's take the titanic data, assume this is the population of interest, and resample from this population 1000 times (with replacement) and each time we will calculate the proportion that survived the disaster in each sample. Before we write the code for this, a few questions to consider. Would you expect the proportion that survived to be the same in each new sample? Why or why not? Sampling with replacement keeps coming up, what do you think this means? Hypothesize why sampling with replacement would be a good idea? Let's now try the resampling with the calculation of the proportion that survived. We will then save these 1000 survival proportions and create a visualization. resample_titanic &lt;- function(...) { titanic %&gt;% sample_n(nrow(titanic), replace = TRUE) %&gt;% df_stats(~ Survived, mean) } survival_prop &lt;- map(1:1000, resample_titanic) %&gt;% bind_rows() gf_density(~ mean_Survived, data = survival_prop) 5.1.6.1 Bootstrap variation in prediction accuracy We can apply these same methods to evaluate the prediction accuracy based on the classification model above. When using the bootstrap, we can get an estimate for how much variation there is in the classification accuracy based on the sample that we have. In addition, we can explore how different the prediction accuracy would be for many samples when using all the data and by splitting the data into training and test sets. Bootstrap full data. Let's first explore the full data to see how much variation there is in the prediction accuracy using all of the data. Here we will again use the sample_n() function to sample with replacement, then fit the classification model to each of these samples, then calculate the prediction accuracy. First, I'm going to write a function to do all of these steps one time. calc_predict_acc &lt;- function(data) { rsamp_titanic &lt;- titanic %&gt;% sample_n(nrow(titanic), replace = TRUE) class_model &lt;- rpart(survived ~ Pclass + Sex + Age + Fare + SibSp + Parch, method = &#39;class&#39;, data = rsamp_titanic, cp = .02) titanic_predict &lt;- rsamp_titanic %&gt;% mutate(tree_predict = predict(class_model, type = &#39;class&#39;)) titanic_predict %&gt;% mutate(same_class = ifelse(survived == tree_predict, 1, 0)) %&gt;% df_stats(~ same_class, mean, sum) } calc_predict_acc() ## mean_same_class sum_same_class ## 1 0.8451178 753 To do the bootstrap, this process can be replicated many times. In this case, I'm going to do 500. In practice, we would likely want to do a few more. predict_accuracy_fulldata &lt;- map(1:2000, calc_predict_acc) %&gt;% bind_rows() gf_density(~ mean_same_class, data = predict_accuracy_fulldata) calc_predict_acc_split &lt;- function(data) { titanic_split &lt;- initial_split(titanic, prop = .7) titanic_train &lt;- training(titanic_split) titanic_test &lt;- testing(titanic_split) class_model &lt;- rpart(survived ~ Pclass + Sex + Age + Fare + SibSp + Parch, method = &#39;class&#39;, data = titanic_train, cp = .02) titanic_predict &lt;- titanic_test %&gt;% mutate(tree_predict = predict(class_model, newdata = titanic_test, type = &#39;class&#39;)) titanic_predict %&gt;% mutate(same_class = ifelse(survived == tree_predict, 1, 0)) %&gt;% df_stats(~ same_class, mean, sum) } calc_predict_acc_split() ## mean_same_class sum_same_class ## 1 0.8277154 221 predict_accuracy_traintest &lt;- map(1:2000, calc_predict_acc_split) %&gt;% bind_rows() gf_density(~ mean_same_class, data = predict_accuracy_traintest) bind_rows( mutate(predict_accuracy_fulldata, type = &quot;Full Data&quot;), mutate(predict_accuracy_traintest, type = &quot;Train/Test&quot;) ) %&gt;% gf_density(~ mean_same_class, color = ~ type, fill = NA, size = 1.25) 5.1.7 Cross-validation "],
["linear-model.html", "Chapter 6 Linear Model 6.1 Regression Trees 6.2 Simple Regression continuous predictor 6.3 Conditional Means", " Chapter 6 Linear Model 6.1 Regression Trees In this example, data on major league baseball players that comes with an R package, ISLR. These data contain information about hitters in major league baseball for the 1986 season and also contain information about their starting salary for the 1987 season. Missing data related to salary information was dropped from the data. ### Loading R packages hen the packages can be loaded and some processing is done on the Hitters data to drop any missing data elements from the salary data attribute. Finally, the first few rows of the data are shown with the head() function. library(tidyverse) library(ggformula) library(mosaic) library(ISLR) library(rpart) library(rsample) library(rpart.plot) library(statthink) # Set theme for plots theme_set(theme_statthinking()) Hitters &lt;- Hitters %&gt;% drop_na(Salary) head(Hitters) ## AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun ## -Alan Ashby 315 81 7 24 38 39 14 3449 835 69 ## -Alvin Davis 479 130 18 66 72 76 3 1624 457 63 ## -Andre Dawson 496 141 20 65 78 37 11 5628 1575 225 ## -Andres Galarraga 321 87 10 39 42 30 2 396 101 12 ## -Alfredo Griffin 594 169 4 74 51 35 11 4408 1133 19 ## -Al Newman 185 37 1 23 8 21 2 214 42 1 ## CRuns CRBI CWalks League Division PutOuts Assists Errors ## -Alan Ashby 321 414 375 N W 632 43 10 ## -Alvin Davis 224 266 263 A W 880 82 14 ## -Andre Dawson 828 838 354 N E 200 11 3 ## -Andres Galarraga 48 46 33 N E 805 40 4 ## -Alfredo Griffin 501 336 194 A W 282 421 25 ## -Al Newman 30 9 24 N E 76 127 7 ## Salary NewLeague ## -Alan Ashby 475.0 N ## -Alvin Davis 480.0 A ## -Andre Dawson 500.0 N ## -Andres Galarraga 91.5 N ## -Alfredo Griffin 750.0 A ## -Al Newman 70.0 A 6.1.1 Visualize distributions Exploring the distribution of the variable of interest is often the first step in an analysis. Here, we are interested in exploring the distribution of salaries of major league baseball players and seeing if data attributes can help to predict the salary for the player. The first plot explored is the density of the salary variable. gf_density(~ Salary, data = Hitters) What are some features of the distribution above? Could there be some concerns about this distribution if we are looking to do some analysis on this? In general, symmetric distributions are preferred over skewed distributions and some models make an assumption of normality, a special type of symmetric distribution. One way to help make a skewed distribution more symmetric is to transform the data. For a positively skewed distribution, such as income, rent, salary, etc, a log transformation is a common transformation that is used by econometricians and is a meaningful transformation. The largest downside of the transformation is that the original metric is lost and the analysis is done on the transformed metric. The log transformation identified above is often referred to as a non-linear transformation such that it alters values differently based on where these are on the scale. For example, the log transformation will minimize gaps that are higher up on the scale and spread out gaps in small values, this is why this type of transformation is common for right or positively skewed data. Below is a figure applying the log transformation to the salary attribute. gf_density(~ log(Salary), data = Hitters) ### Explore relationships between two quantitative attributes So far, the course has focused on exploring relationships between a quantitative and various qualitative (i.e. categorical or grouping) attributes. It is also common to want to explore relationships between two quantitative attributes. One way to visualize this type of relationship is with a scatterplot and this can be done with the gf_point() function. Similar to other multivariate figures, this function takes a formula as the input where the attribute of interest (log of salary here) is placed on the left hand side of the equation and the second attribute is placed on the right hand side of the equation. Below, the equation log(Salary) ~ HmRun means that the log salary is the attribute of interest (placed on the y-axis) is going to be plotted in conjunction with the number of home runs the player hit (placed on the x-axis). Let's look at the figure. gf_point(log(Salary) ~ HmRun, data = Hitters) Another measure of association between two attributes is the correlation. This statistic gives a single number summary about the linear relationship between two quantitative attributes. The correlation ranges between -1 and +1 where 0 means no relationship. The closer the correlation gets to -1 or +1 indicates a stronger linear relationship between the two attributes. A correlation of -1 means the two attributes are inversely related, more specifically this means that as one goes up the other will tend to decrease. The opposite is true for a correlation of +1 indicating a positive relationship, as one attribute increases the other tends to increase as well. cor(log(Salary) ~ HmRun, data = Hitters) ## [1] 0.3398543 6.1.2 Decision Tree - Regression Tree Another way to explore the relationship between two quantitative attributes is through the fitting a regression tree. A regression tree is similar to a classification tree, however now the output is a numeric or continuous type variable that takes on many different values. In the classification tree example, the focus in this class was predicting if a case belonged to one of two classes. In this case, the regression tree will predict the numeric variable with many potential values rather than just two. The syntax for fitting a regression tree is very similar in R compared to the classification tree. The same function, rpart() is used and the function rpart.plot() will be used to visualize the fitted regression tree similar to before. The primary argument to the rpart() function is a formula where the left-hand side is the attribute of interest and the right hand side contains attributes that help predict the outcome. In the example below, the log of salary is the outcome and the number of home runs hit during the previous season is used as the sole continuous attribute used to predict the log of the salary. The data argument is also specified and the only difference here between a classification tree and the regression tree here is the method argument. In the regression tree the method argument should be set to method = 'anova'. This tells the rpart() function that the outcome is numeric and that an anova method should be used in the model fitting. The anova stands for Analysis of Variance and we will discuss this in more detail moving forward. hit_reg &lt;- rpart(log(Salary) ~ HmRun, data = Hitters, method = &quot;anova&quot;) rpart.plot(hit_reg, roundint = FALSE, type = 3, branch = .3) The output from the regression tree is similar to that from a classification tree. One major difference however is that the predicted values in the end are numeric quantities instead of classes and the probabilities that were shown previously are not shown here as there is not a probability of being in a class. The percentage of cases in the predicted nodes at the end of the tree are still shown. The logic for following the tree is the same as before where each split can have two new paths to follow and then the variable(s) are re-evaluated after the first split to see if additional splits can help predict the outcome of interest. Below is a figure that builds on the scatterplot we saw above. Vertical lines are shown that indicate the two splits that were established from the above regression tree. These splits are where the end buckets lie and all of the data points residing in a single area have the same predicted log salary. gf_point(log(Salary) ~ HmRun, data = Hitters, color = &#39;gray55&#39;) %&gt;% gf_vline(xintercept = c(8.5, 19), size = 1) %&gt;% gf_text(x = 2, y = 4.2, label = &quot;5.6&quot;, color = &quot;red&quot;, size = 5) %&gt;% gf_text(x = 12, y = 4.2, label = &quot;6.1&quot;, color = &quot;red&quot;, size = 5) %&gt;% gf_text(x = 32, y = 4.2, label = &quot;6.4&quot;, color = &quot;red&quot;, size = 5) %&gt;% gf_labs(y = &quot;Log of player salary&quot;, x = &quot;Number of Home Runs&quot;, title = &quot;Log salary by number of home runs&quot;) ## Warning: geom_vline(): Ignoring `mapping` because `xintercept` was provided. #### Explore another attribute Let's explore another attribute, the number of hits in the previous season and how this may be related to the log of the salary. First a scatterplot is shown then the correlation is computed. gf_point(log(Salary) ~ Hits, data = Hitters) cor(log(Salary) ~ Hits, data = Hitters) ## [1] 0.4495841 Updating the regression tree with another variable is similar to a classification tree. More than one attribute used to help predict the outcome are separated by + signs. In addition, I specified the model to terminate when the complexity parameter (CP) gets smaller than .012. hit_reg &lt;- rpart(log(Salary) ~ HmRun + Hits, data = Hitters, method = &quot;anova&quot;, cp = .012) rpart.plot(hit_reg, roundint = FALSE, type = 3, branch = .3) The figure below attempts to show the regression tree in a scatterplot. Now there are more predicted buckets and these are represented by the square areas of the figure below. All of the data points within each square would receive the same predicted score. gf_point(HmRun ~ Hits, data = Hitters, color = ~ log(Salary)) %&gt;% gf_vline(xintercept = c(118, 146), size = 1) %&gt;% gf_segment(8.5 + 8.5 ~ 0 + 118, size = 0.75, color = &quot;black&quot;) %&gt;% gf_segment(8.5 + 8.5 ~ 146 + 238, size = 0.75, color = &quot;black&quot;) %&gt;% gf_text(x = 1, y = 3, label = &quot;5.4&quot;, color = &quot;red&quot;, size = 5) %&gt;% gf_text(x = 128, y = 3, label = &quot;6.3&quot;, color = &quot;red&quot;, size = 5) %&gt;% gf_text(x = 170, y = 3, label = &quot;6.1&quot;, color = &quot;red&quot;, size = 5) %&gt;% gf_text(x = 50, y = 35, label = &quot;5.9&quot;, color = &quot;red&quot;, size = 5) %&gt;% gf_text(x = 200, y = 35, label = &quot;6.7&quot;, color = &quot;red&quot;, size = 5) %&gt;% gf_labs(x = &quot;Number of Hits&quot;, y = &quot;Number of Home Runs&quot;, title = &quot;Log salary by number of home runs and hits&quot;) ## Warning: geom_vline(): Ignoring `mapping` because `xintercept` was provided. One thing that can help with interpretation when the data are transformed, in this case by taking the log of the salary variable, is to back-transform to the original salary metric. In this case, the inverse of the log is the exponential function. This can be achieved in R with the exp() function. The predicted values from the regression tree are back-transformed to show the salaries in their original metric, in thousands of dollars. exp(c(5.4, 5.9, 6.3, 6.1, 6.7)) ## [1] 221.4064 365.0375 544.5719 445.8578 812.4058 6.1.3 Evaluating accuracy In the classification tree example, a natural metric to evaluate how well the model was doing was the classification accuracy. This was most useful being computed individually for each class that was predicted instead of solely overall. In the regression tree example, we do not have class membership, instead we have the original observed salary and the predicted salary. One measure that could be used for accuracy is on average how far do the predicted scores deviate from the observed scores. The below code chunk computes those variables for use, one on the log scale and another on the original back-transformed scale. Hitters &lt;- Hitters %&gt;% mutate(log_salary_pred = predict(hit_reg), log_salary = log(Salary), log_error = log_salary - log_salary_pred, salary_pred = exp(log_salary_pred), error = Salary - salary_pred) head(Hitters) ## AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI CWalks ## 1 315 81 7 24 38 39 14 3449 835 69 321 414 375 ## 2 479 130 18 66 72 76 3 1624 457 63 224 266 263 ## 3 496 141 20 65 78 37 11 5628 1575 225 828 838 354 ## 4 321 87 10 39 42 30 2 396 101 12 48 46 33 ## 5 594 169 4 74 51 35 11 4408 1133 19 501 336 194 ## 6 185 37 1 23 8 21 2 214 42 1 30 9 24 ## League Division PutOuts Assists Errors Salary NewLeague log_salary_pred ## 1 N W 632 43 10 475.0 N 5.375205 ## 2 A W 880 82 14 480.0 A 6.260120 ## 3 N E 200 11 3 500.0 N 6.260120 ## 4 N E 805 40 4 91.5 N 5.872782 ## 5 A W 282 421 25 750.0 A 6.112038 ## 6 N E 76 127 7 70.0 A 5.375205 ## log_salary log_error salary_pred error ## 1 6.163315 0.78810957 215.9842 259.01581 ## 2 6.173786 -0.08633342 523.2815 -43.28148 ## 3 6.214608 -0.04551143 523.2815 -23.28148 ## 4 4.516339 -1.35644260 355.2357 -263.73572 ## 5 6.620073 0.50803537 451.2574 298.74263 ## 6 4.248495 -1.12670999 215.9842 -145.98419 hen, the df_stats() function is used to compute summary statistics for the log_error attribute which represented the difference between the observed and predicted log salaries. After this, the same statistics are computed for the error after back-transforming the data. Both of these are not quite what we want here, any idea why? Hitters %&gt;% df_stats(~ log_error, mean, median, sd, min, max) ## mean_log_error median_log_error sd_log_error min_log_error max_log_error ## 1 1.09754e-15 0.118683 0.7493933 -1.612228 2.287419 Hitters %&gt;% df_stats(~ error, mean, median, sd, min, max) ## mean_error median_error sd_error min_error max_error ## 1 115.4757 34.01581 386.1183 -609.801 1911.349 Instead of computing the average deviation, we first want to take the absolute value of the difference between the observed and predicted scores then compute the summary statistics. This now represents the mean absolute error that was computed earlier when discussing variation and the interpretation of the mean statistic below would be the average distance the predicted scores are from the observed scores, on the log salary scale. In general, lower average distances means the model did a better job of predicting the numeric quantity. However, this value is scale dependent, therefore if the scales of two outcomes are different, the mean absolute error is not directly comparable without some prior standardization. Hitters %&gt;% df_stats(~ abs(log_error), mean, median, sd, min, max) ## mean_abs(log_error) median_abs(log_error) sd_abs(log_error) ## 1 0.6128455 0.527838 0.4296245 ## min_abs(log_error) max_abs(log_error) ## 1 0.0002568557 2.287419 6.2 Simple Regression continuous predictor 6.2.1 Description of the Data These data contain information on mother's and baby's health for 1,174 pregnant women. baby &lt;- read_csv(&quot;https://raw.githubusercontent.com/lebebr01/statthink/master/data-raw/baby.csv&quot;) ## Parsed with column specification: ## cols( ## birth_weight = col_double(), ## gestational_days = col_double(), ## maternal_age = col_double(), ## maternal_height = col_double(), ## maternal_pregnancy_weight = col_double(), ## maternal_smoker = col_logical() ## ) head(baby) ## # A tibble: 6 x 6 ## birth_weight gestational_days maternal_age maternal_height maternal_pregna… ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 120 284 27 62 100 ## 2 113 282 33 64 135 ## 3 128 279 28 64 115 ## 4 108 282 23 67 125 ## 5 136 286 25 62 93 ## 6 138 244 33 62 178 ## # … with 1 more variable: maternal_smoker &lt;lgl&gt; 6.2.2 Scatterplots As we've explored before, scatterplots help to explore the relationship between two continuous, quantitative data attributes. These are created with the gf_point() function and adding lines to the figure to provide some guidance to the relationship can be done with the gf_smooth() function. Below, a scatterplot is created that explores the relationship between birth weight and gestational days. gf_point(birth_weight ~ gestational_days, data = baby, size = 3, alpha = .2) %&gt;% gf_smooth(method = &#39;lm&#39;, linetype = 2, size = 1) %&gt;% gf_smooth(size = 1) ## `geom_smooth()` using method = &#39;gam&#39; The figure shows two types of lines, the dashed line is assuming a linear relationship (specified with gf_smooth(method = 'lm')) and the solid line is allowing the relationship to be more flexible to account for any non-linearity. There does appear to be some evidence of non-linearity, particularly in the tails of gestational days distribution. We can attempt to summarize this relationship in a single numeric value by computing the correlation coefficient. The correlation was initially explored when fitting regression trees. The correlation can be calculated with the cor() function with the primary argument being a formula depicting the two variables to compute the correlation on. cor(birth_weight ~ gestational_days, data = baby) ## [1] 0.4075428 Here the correlation represents the degree of linear relationship between the two variables. Values closer to 1 in absolute value (i.e. +1 or -1) show a stronger linear relationship and values closer to 0 indicate no relationship or weaker relationship. The correlation between the two variables above was about 0.41 indicating that there is a moderate positive linear relationship between birth weight and gestational days. The correlation is shown to be positive due to the coefficient being positive and the general trend from the scatterplot shows a direction of relationship moving from the lower left of the figure to the upper right of the figure. A negative correlation would have a negative sign associated with it and would trend from the upper left to the lower right of a scatterplot. 6.2.3 Fitting a linear regression model Now that the correlation was computed, we have evidence that there is a relationship between the baby birth weight and the gestational days. To provide some more evidence about the strength of this relationship and how much error is involved, fitting a linear regression model is often done. This can be done with the lm() function where the two arguments that need to be specified are a formula and the data to use for the model fitting. The formula takes the following form: birth_weight ~ gestational_days, where birth weight is the outcome of interest (in language we've used previously, this is the attribute we want to predict) and gestational days is the attribute we want to use to do the predicting of birth weight. Another way to think about what these variables represent is to explain variation in the birth weight with gestational days. In other words, the assumption is made that gestational days impacts or explains differences in the baby birth weight. baby_reg &lt;- lm(birth_weight ~ gestational_days, data = baby) coef(baby_reg) ## (Intercept) gestational_days ## -10.7541389 0.4665569 he following coefficients represent the linear regression equation that more generally can be show as: \\[\\begin{equation} birth\\_weight = -10.8 + 0.47 gestational\\_days + \\epsilon \\end{equation}\\] The equation can also be represented without the error, \\(\\epsilon\\) as: begin{equation} = -10.8 + 0.47 gestational_days \\end{equation} where now the birth weight outcome has a hat (i.e. \\(\\hat{y}\\)) that denotes mathematically that the equation predicts a value of birth weight given solely the number of gestational days. The first equation above says that the original observed birth weight is a function of gestational days plus some error. Using the equation above, the predicted birth weight can be obtained by including a value inserted for gestational days. Let's pick a few values for gestational days to try. -10.8 + 0.47 * 200 ## [1] 83.2 -10.8 + 0.47 * 275 ## [1] 118.45 -10.8 + 0.47 * 276 ## [1] 118.92 You may notice that the predicted value of birth weight increases by 0.47 grams for every one day increase in gestational days, often referred to as the linear slope. The predicted values would fit on the dashed line shown in the scatterplot shown above. This highlights the assumption made here from the linear regression model above in which the relationship between birth weight and gestational days is assumed to be linear. It is possible to relax this assumption with a more complicated model, however this is the assumption being made currently. 6.2.4 Explore the y-intercept So far the discussion has focused on the linear slope, often a term that is of most interest. However, the y-intercept can also be made to be more interesting by adjusting the range of gestational days. 6.2.4.1 Mean center gestational days First, mean centering the x attribute can often be a way to make the y-intercept more interpretable. The code below shows a scatterplot by subtracting the mean from all the values of gestational days. gf_point(birth_weight ~ I(gestational_days - mean(gestational_days)), data = baby, size = 3, alpha = .2) %&gt;% gf_smooth(method = &#39;lm&#39;, linetype = 2, size = 1) %&gt;% gf_smooth(size = 1) ## `geom_smooth()` using method = &#39;gam&#39; Notice that the relationship is the same as before, but now the scale of gestational days is different. It may be more difficult to interpret now as the number of days a women is pregnant is relatively well known, but now the mean gestational days is represented as 0 in the figure and all the values are in reference to that instead of referencing when a women became pregnant. Using this same approach, a linear regression can be fitted to this newly recentered gestational days variable. baby_reg_centered &lt;- lm(birth_weight ~ I(gestational_days - mean(gestational_days)), data = baby) coef(baby_reg_centered) ## (Intercept) ## 119.4625213 ## I(gestational_days - mean(gestational_days)) ## 0.4665569 he new equation would look like: begin{equation} = 119.5 + 0.47 (gestational_days - mean(gestational_days)) \\end{equation} 119.5 + 0.47 * -3 ## [1] 118.09 119.5 + 0.47 * 0 ## [1] 119.5 6.2.4.2 Minimum or Maximum centered gestational days A few other options that are common are to subtract the minimum or maximum values from the x attribute. baby_reg_min &lt;- lm(birth_weight ~ I(gestational_days - min(gestational_days)), data = baby) coef(baby_reg_min) ## (Intercept) ## 58.2962789 ## I(gestational_days - min(gestational_days)) ## 0.4665569 baby_reg_max &lt;- lm(birth_weight ~ I(gestational_days - max(gestational_days)), data = baby) coef(baby_reg_max) ## (Intercept) ## 153.9404386 ## I(gestational_days - max(gestational_days)) ## 0.4665569 6.3 Conditional Means "],
["estimation-bootstrap-uncertainty.html", "Chapter 7 Estimation / Bootstrap / Uncertainty 7.1 Estimating Error 7.2 Categorical Predictor(s) 7.3 More than 2 categorical groups 7.4 Multiple Regression", " Chapter 7 Estimation / Bootstrap / Uncertainty library(tidyverse) library(ggformula) library(mosaic) library(broom) library(statthink) # Set theme for plots theme_set(theme_statthinking()) baby &lt;- read_csv(&quot;https://raw.githubusercontent.com/lebebr01/statthink/master/data-raw/baby.csv&quot;) head(baby) ## # A tibble: 6 x 6 ## birth_weight gestational_days maternal_age maternal_height maternal_pregna… ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 120 284 27 62 100 ## 2 113 282 33 64 135 ## 3 128 279 28 64 115 ## 4 108 282 23 67 125 ## 5 136 286 25 62 93 ## 6 138 244 33 62 178 ## # … with 1 more variable: maternal_smoker &lt;lgl&gt; Bootstrap and resampling methods can be used to estimate the variability in the estimated effects. 7.1 Estimating Error To get some sense of the amount of error in the estimate of the linear slope here, a bootstrap can be done to provide some evidence of the likely range of slope values. The bootstrap will take the following general steps: Resample the observed data available, with replacement Fit the same linear regression model as above. Save the slope coefficient representing the relationship between birth weight and gestational days Repeat steps 1 - 3 many times Explore the distribution of slope estimates from the many resampled data sets. When this was done with the classification tree, a function was used to do these steps once, then these were repeated many times. Below is a function that does the steps 1 - 3 above a single time. resample_baby &lt;- function(...) { baby_resample &lt;- baby %&gt;% sample_n(nrow(baby), replace = TRUE) baby_resample %&gt;% lm(birth_weight ~ gestational_days, data = .) %&gt;% coef(.) %&gt;% .[2] %&gt;% data.frame() } resample_baby() ## . ## gestational_days 0.5076693 Now that there is a function that does steps 1 - 3, these processes can now be repeated many times. baby_coef &lt;- map(1:10000, resample_baby) %&gt;% bind_rows() names(baby_coef) &lt;- &#39;slope&#39; gf_density(~ slope, data = baby_coef) baby_coef %&gt;% df_stats(~ slope, quantile(c(0.05, 0.5, 0.95))) ## 5% 50% 95% ## 1 0.3947434 0.4674464 0.5432524 7.2 Categorical Predictor(s) Before, linear regression has been ran with a continuous attribute. In both models, the baby's birth weight was the outcome of interest and the predictor in one model was the number of gestational days and in the other was the age of the mother at time of birth. What happens when a categorical predictor is used instead of a continuous predictor? This section will introduce that idea with a categorical predictor that has two different levels. 7.2.1 Mother's smoking It is known that a mother smoking while pregnant can hamper the development of the unborn fetus. Will this transition into lower birth weight for baby's born to mothers who smoked during the pregnancy? First, let's explore the distribution and calculate descriptive statistics for birth weight across the two groups. gf_density(~ birth_weight, color = ~ maternal_smoker, size = 1.25, fill = &#39;gray80&#39;, data = baby) %&gt;% gf_labs(x = &#39;Birth Weight (in oz)&#39;, color = &#39;Smoked?&#39;) What are the general take-aways from the distributions above? To give some additional information, a violin plot may be helpful. gf_violin(birth_weight ~ maternal_smoker, data = baby, draw_quantiles = c(0.1, 0.5, 0.9), fill = &#39;gray85&#39;, size = 1) %&gt;% gf_refine(coord_flip()) %&gt;% gf_labs(y = &quot;Birth Weight (in oz)&quot;, x = &quot;Smoker?&quot;) Any additional information shown here that shows differences? To finish the descriptive exploration, let's compute some descriptive statistics. baby %&gt;% df_stats(birth_weight ~ maternal_smoker, mean, sd, median, quantile(c(0.25, 0.75)), length) ## maternal_smoker mean_birth_weight sd_birth_weight median_birth_weight 25% 75% ## 1 FALSE 123.0853 17.42370 123 113 134 ## 2 TRUE 113.8192 18.29501 115 101 126 ## length_birth_weight ## 1 715 ## 2 459 7.2.2 Linear Regression - Categorical Predictor Now it is time to fit a model to the data here to explore if there indeed is a difference in the population. We know descriptively there is a difference in the two group means and medians, but is this difference large enough to be practical? The model is fitted similar to before with the lm() function and a similar formula as before. The outcome (birth weight) is to the left of the ~ and the predictor (maternal smoking status) is to the right. smoker_reg &lt;- lm(birth_weight ~ maternal_smoker, data = baby) coef(smoker_reg) ## (Intercept) maternal_smokerTRUE ## 123.085315 -9.266143 To explore what these coefficients mean in a bit more detail, let's look at the data a bit more. baby &lt;- baby %&gt;% mutate(smoker = ifelse(maternal_smoker, 1, 0)) head(baby) ## # A tibble: 6 x 7 ## birth_weight gestational_days maternal_age maternal_height maternal_pregna… ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 120 284 27 62 100 ## 2 113 282 33 64 135 ## 3 128 279 28 64 115 ## 4 108 282 23 67 125 ## 5 136 286 25 62 93 ## 6 138 244 33 62 178 ## # … with 2 more variables: maternal_smoker &lt;lgl&gt;, smoker &lt;dbl&gt; Instead of using the maternal_smoker attribute, instead let's run the model with the smoker attribute. smoker_reg_new &lt;- lm(birth_weight ~ smoker, data = baby) coef(smoker_reg_new) ## (Intercept) smoker ## 123.085315 -9.266143 Notice that the coefficients for the linear regression are the same no matter which attribute is entered into the model. When a categorical attribute is entered into the regression in R, the attribute is automatically converted into something called an indicator or dummy variable. This means that one of the two values are represented with a 1, the other with a 0. The value that is represented with a 0 is the one that is closer to the letter &quot;A&quot;, meaning that the 0 is the first category in alphabetical order. To again get a better grasp, the descriptive stats and the coefficients from the regression are shown together below. baby %&gt;% df_stats(birth_weight ~ maternal_smoker, mean, sd, median, quantile(c(0.25, 0.75)), length) ## maternal_smoker mean_birth_weight sd_birth_weight median_birth_weight 25% 75% ## 1 FALSE 123.0853 17.42370 123 113 134 ## 2 TRUE 113.8192 18.29501 115 101 126 ## length_birth_weight ## 1 715 ## 2 459 coef(smoker_reg) ## (Intercept) maternal_smokerTRUE ## 123.085315 -9.266143 7.2.3 Inference Similar to the continuous predictor, resampling/bootstrap takes a similar method in the case with a single categorical predictor. In order to get some sense of the amount of error in the estimate of the linear slope here, a bootstrap can be done to provide some evidence of the likely range of slope values. The bootstrap will take the following general steps: Resample the observed data available, with replacement Fit the same linear regression model as above. Save the slope coefficient representing the relationship between birth weight and gestational days Repeat steps 1 - 3 many times Explore the distribution of slope estimates from the many resampled data sets. resample_baby &lt;- function(...) { baby_resample &lt;- baby %&gt;% sample_n(nrow(baby), replace = TRUE) baby_resample %&gt;% lm(birth_weight ~ maternal_smoker, data = .) %&gt;% coef(.) %&gt;% .[2] %&gt;% data.frame() } resample_baby() ## . ## maternal_smokerTRUE -11.17084 Now that there is a function that does steps 1 - 3, these processes can now be repeated many times. baby_coef &lt;- map(1:10000, resample_baby) %&gt;% bind_rows() names(baby_coef) &lt;- &#39;slope&#39; gf_density(~ slope, data = baby_coef) baby_coef %&gt;% df_stats(~ slope, quantile(c(0.05, 0.5, 0.95))) ## 5% 50% 95% ## 1 -11.00104 -9.253011 -7.514545 7.3 More than 2 categorical groups Before the model contained one attribute that represented two groups. What happens when there are more than two groups for an attribute? To explore this, the college scorecard data will be used again. college_score &lt;- read_csv(&quot;https://raw.githubusercontent.com/lebebr01/statthink/master/data-raw/College-scorecard-clean.csv&quot;, guess_max = 10000) ## Parsed with column specification: ## cols( ## instnm = col_character(), ## city = col_character(), ## stabbr = col_character(), ## preddeg = col_character(), ## region = col_character(), ## locale = col_character(), ## adm_rate = col_double(), ## actcmmid = col_double(), ## ugds = col_double(), ## costt4_a = col_double(), ## costt4_p = col_double(), ## tuitionfee_in = col_double(), ## tuitionfee_out = col_double(), ## debt_mdn = col_double(), ## grad_debt_mdn = col_double(), ## female = col_double(), ## bachelor_degree = col_double() ## ) head(college_score) ## # A tibble: 6 x 17 ## instnm city stabbr preddeg region locale adm_rate actcmmid ugds costt4_a ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alaba… Norm… AL Bachel… South… City:… 0.903 18 4824 22886 ## 2 Unive… Birm… AL Bachel… South… City:… 0.918 25 12866 24129 ## 3 Unive… Hunt… AL Bachel… South… City:… 0.812 28 6917 22108 ## 4 Alaba… Mont… AL Bachel… South… City:… 0.979 18 4189 19413 ## 5 The U… Tusc… AL Bachel… South… City:… 0.533 28 32387 28836 ## 6 Aubur… Mont… AL Bachel… South… City:… 0.825 22 4211 19892 ## # … with 7 more variables: costt4_p &lt;dbl&gt;, tuitionfee_in &lt;dbl&gt;, ## # tuitionfee_out &lt;dbl&gt;, debt_mdn &lt;dbl&gt;, grad_debt_mdn &lt;dbl&gt;, female &lt;dbl&gt;, ## # bachelor_degree &lt;dbl&gt; 7.3.1 Explore distribution 3 groups Early in the course, the distribution of admission rates by the primary degree that the institution grants was explored. Below is a violin plot that shows these three distributions. gf_violin(adm_rate ~ preddeg, data = college_score, fill = &#39;gray85&#39;, size = 1, draw_quantiles = c(0.1, 0.5, 0.9)) There may be some small differences between these groups, but more formally we can test this to understand the amount of uncertainty in the average of the distributions. This again will make use of the lm() function in R and the formula is very similar to what was done before and mimics the formula from the violin plot above. adm_model &lt;- lm(adm_rate ~ preddeg, data = college_score) coef(adm_model) ## (Intercept) preddegBachelor Degree preddegCertificate Degree ## 0.72296993 -0.05170254 0.02193828 Guesses as to what these coefficients represent? How were the categorical groups turned into the different elements in the model? 7.3.2 Overall model fit There is a measure of overall model fit that is commonly used in the research literature for linear regression models, called R-squared. R-squared represents the proportion of variation in the outcome that is explained by the attributes in the model. The statistic ranges from 0 to 1 where values closer to 1 indicate larger percentages of variation explained. This can be extracted from the model directly. summary(adm_model)$r.squared ## [1] 0.01404376 Another one can be computed from the baby data where the birth weight was the outcome and gestational days was the primary attribute used as a predictor. baby_reg &lt;- lm(birth_weight ~ gestational_days, data = baby) summary(baby_reg)$r.squared ## [1] 0.1660911 For models with a single predictor variable, R-squared is the correlation coefficient squared. For example: cor(birth_weight ~ gestational_days, data = baby) ^ 2 ## [1] 0.1660911 7.4 Multiple Regression What happens if we would like to combine the two predictors? Shown above is that the number of gestational days has a moderate relationship to the baby weight, therefore exploring the effects of smoking, it would be nice to remove the effect of gestational days from the baby weight. More specifically, this essentially allows us to make comparisons on the effect of smoking for the same gestational days. One way to think about this is through conditional means. Exploration of these visually first can be particularly helpful. gf_point(birth_weight ~ gestational_days, data = baby, size = 3) %&gt;% gf_smooth() %&gt;% gf_facet_wrap(~ maternal_smoker) ## `geom_smooth()` using method = &#39;loess&#39; baby_reg_smoker &lt;- lm(birth_weight ~ I(gestational_days - mean(gestational_days)) + maternal_smoker, data = baby) coef(baby_reg_smoker) ## (Intercept) ## 122.7366688 ## I(gestational_days - mean(gestational_days)) ## 0.4511679 ## maternal_smokerTRUE ## -8.3743990 We can write out the regression equation similar to before: \\[\\begin{equation} birth\\_weight = 122.67 + 0.49 (gestational\\_days - mean(gestational\\_days) - 8.17 maternal\\_smoker + \\epsilon \\end{equation}\\] Let's explore how these are interpreted. ### Distribution of Effects Similar to before, the distribution of effects can be obtained with the following steps: Resample the observed data available, with replacement Estimate linear model coefficients. Save terms of interest Repeat steps 1 - 3 many times Explore the distribution of median differences from the many resampled data sets. resample_baby &lt;- function(...) { baby_resample &lt;- baby %&gt;% sample_n(nrow(baby), replace = TRUE) baby_resample %&gt;% lm(birth_weight ~ I(gestational_days - mean(gestational_days)) + maternal_smoker, data = .) %&gt;% tidy(.) %&gt;% select(term, estimate) } resample_baby() ## # A tibble: 3 x 2 ## term estimate ## &lt;chr&gt; &lt;dbl&gt; ## 1 (Intercept) 124. ## 2 I(gestational_days - mean(gestational_days)) 0.451 ## 3 maternal_smokerTRUE -9.21 coef_baby &lt;- map(1:10000, resample_baby) %&gt;% bind_rows() coef_baby %&gt;% gf_density(~ estimate) %&gt;% gf_facet_wrap(~ term, scales = &#39;free&#39;) 7.4.1 Interactions One additional idea that can be quite powerful is the idea of interactions. This was indirectly shown earlier in the course with classification and regression trees, where the models after each split re-evaluated which attributes were most helpful. In this way, the same attribute could be used in different places with different scores identifying the split. A similar idea can be explored in the regression framework, where the idea is that there are differential effects for different groups. This can be shown visually: gf_point(birth_weight ~ gestational_days, data = baby, size = 3) %&gt;% gf_smooth() %&gt;% gf_facet_wrap(~ maternal_smoker) ## `geom_smooth()` using method = &#39;loess&#39; baby_reg_int &lt;- lm(birth_weight ~ I(gestational_days - mean(gestational_days)) * maternal_smoker, data = baby) coef(baby_reg_int) ## (Intercept) ## 122.799690 ## I(gestational_days - mean(gestational_days)) ## 0.369615 ## maternal_smokerTRUE ## -8.257707 ## I(gestational_days - mean(gestational_days)):maternal_smokerTRUE ## 0.230846 resample_baby &lt;- function(...) { baby_resample &lt;- baby %&gt;% sample_n(nrow(baby), replace = TRUE) baby_resample %&gt;% lm(birth_weight ~ I(gestational_days - mean(gestational_days)) * maternal_smoker, data = .) %&gt;% tidy(.) %&gt;% select(term, estimate) } resample_baby() ## # A tibble: 4 x 2 ## term estimate ## &lt;chr&gt; &lt;dbl&gt; ## 1 (Intercept) 123. ## 2 I(gestational_days - mean(gestational_days)) 0.417 ## 3 maternal_smokerTRUE -8.35 ## 4 I(gestational_days - mean(gestational_days)):maternal_smokerTRUE 0.121 coef_baby &lt;- map(1:10000, resample_baby) %&gt;% bind_rows() coef_baby %&gt;% gf_density(~ estimate) %&gt;% gf_facet_wrap(~ term, scales = &#39;free&#39;) 7.4.2 Evaluating model fit As discussed earlier, R-square is a measure of overall model fit. These can be compared across the different models to see which one may be doing the best and explaining the most variation in the baby's birth weight. summary(baby_reg)$r.square ## [1] 0.1660911 summary(smoker_reg)$r.square ## [1] 0.06091 summary(baby_reg_smoker)$r.square ## [1] 0.215661 summary(baby_reg_int)$r.square ## [1] 0.2249173 "],
["prediction-for-individuals.html", "Chapter 8 Prediction for individuals 8.1 Comparison of classification / linear model 8.2 Compared linear model with median", " Chapter 8 Prediction for individuals 8.1 Comparison of classification / linear model 8.2 Compared linear model with median 8.2.1 Skewed Data - Inference In one example, a skewed distribution was transformed prior to conducting the analysis with a regression tree. Another approach could be to use a more robust statistic such as the median. One limitation of the median, is that a linear regression model as we have covered so far, does not allow you to fit the model while using the median. library(tidyverse) library(ggformula) library(mosaic) library(broom) library(statthink) # Set theme for plots theme_set(theme_statthinking()) college_score &lt;- read_csv(&quot;https://raw.githubusercontent.com/lebebr01/statthink/master/data-raw/College-scorecard-clean.csv&quot;, guess_max = 10000) head(college_score) ## # A tibble: 6 x 17 ## instnm city stabbr preddeg region locale adm_rate actcmmid ugds costt4_a ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alaba… Norm… AL Bachel… South… City:… 0.903 18 4824 22886 ## 2 Unive… Birm… AL Bachel… South… City:… 0.918 25 12866 24129 ## 3 Unive… Hunt… AL Bachel… South… City:… 0.812 28 6917 22108 ## 4 Alaba… Mont… AL Bachel… South… City:… 0.979 18 4189 19413 ## 5 The U… Tusc… AL Bachel… South… City:… 0.533 28 32387 28836 ## 6 Aubur… Mont… AL Bachel… South… City:… 0.825 22 4211 19892 ## # … with 7 more variables: costt4_p &lt;dbl&gt;, tuitionfee_in &lt;dbl&gt;, ## # tuitionfee_out &lt;dbl&gt;, debt_mdn &lt;dbl&gt;, grad_debt_mdn &lt;dbl&gt;, female &lt;dbl&gt;, ## # bachelor_degree &lt;dbl&gt; adm_model &lt;- lm(adm_rate ~ preddeg, data = college_score) coef(adm_model) ## (Intercept) preddegBachelor Degree preddegCertificate Degree ## 0.72296993 -0.05170254 0.02193828 Prior to doing the median, we can bootstrap the mean difference from the model above. resample_admrate &lt;- function(...) { college_resample &lt;- college_score %&gt;% sample_n(nrow(college_score), replace = TRUE) college_resample %&gt;% lm(adm_rate ~ preddeg, data = .) %&gt;% tidy(.) %&gt;% select(term, estimate) } resample_admrate() ## # A tibble: 3 x 2 ## term estimate ## &lt;chr&gt; &lt;dbl&gt; ## 1 (Intercept) 0.742 ## 2 preddegBachelor Degree -0.0667 ## 3 preddegCertificate Degree 0.0158 admrate_coef &lt;- map(1:10000, resample_admrate) %&gt;% bind_rows() admrate_coef %&gt;% gf_density(~ estimate) %&gt;% gf_facet_wrap(~ term, scales = &#39;free_x&#39;) 8.2.2 Bootstrap Median he bootstrap for the median will take much of a similar process as before, the major difference being that a model will not be fitted. Instead, we will compute statistics for the median of each group, take differences of the median to represent the median difference between the groups and then replicate. Resample the observed data available, with replacement Estimate median for each group. Calculate median difference between the groups Repeat steps 1 - 3 many times Explore the distribution of median differences from the many resampled data sets. resample_admrate_median &lt;- function(...) { college_resample &lt;- college_score %&gt;% sample_n(nrow(college_score), replace = TRUE) med_est &lt;- college_resample %&gt;% df_stats(adm_rate ~ preddeg, median) %&gt;% spread(preddeg, median_adm_rate) names(med_est) &lt;- c(&quot;Associate&quot;, &quot;Bachelor&quot;, &quot;Certificate&quot;) med_est %&gt;% mutate(bachelor_associate = Bachelor - Associate, certificate_associate = Certificate - Associate, bachelor_certificate = Bachelor - Certificate) %&gt;% gather(Associate:bachelor_certificate, key = &quot;Term&quot;, value = &quot;Median_Difference&quot;) } resample_admrate_median() ## Term Median_Difference ## 1 Associate 0.7826 ## 2 Bachelor 0.6953 ## 3 Certificate 0.8055 ## 4 bachelor_associate -0.0873 ## 5 certificate_associate 0.0229 ## 6 bachelor_certificate -0.1102 admrate_median &lt;- map(1:10000, resample_admrate_median) %&gt;% bind_rows() admrate_median %&gt;% filter(Term %in% c(&#39;bachelor_associate&#39;, &#39;certificate_associate&#39;, &#39;bachelor_certificate&#39;)) %&gt;% gf_density(~ Median_Difference) %&gt;% gf_facet_wrap(~ Term, scales = &#39;free_x&#39;) "]
]
